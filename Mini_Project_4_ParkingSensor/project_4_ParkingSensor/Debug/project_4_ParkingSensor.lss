
project_4_ParkingSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000030f0  00003184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800194  00800194  000032b8  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef5  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006955  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000090f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b650  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e7 14 	call	0x29ce	; 0x29ce <main>
      8a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 56       	subi	r30, 0x6D	; 109
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <BUZZER_init>:
/*
 * Description :
 * Function to initialize the buzzer
 */
void BUZZER_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT); 	/* Set buzzer pin as output */
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
    GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW); 				/* Set initial state of buzzer pin to low */
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	63 e0       	ldi	r22, 0x03	; 3
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <BUZZER_sound>:
/*
 * Description :
 * Function to produce sound with the buzzer
 */
void BUZZER_sound (uint8 sound_level)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	89 83       	std	Y+1, r24	; 0x01
    /* Limit sound level to a maximum of 30 cm distance */
    if (sound_level > MAX_DISTANCE)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	8f 31       	cpi	r24, 0x1F	; 31
     e60:	18 f0       	brcs	.+6      	; 0xe68 <BUZZER_sound+0x18>
    {
        /* TURN off the buzzer sound */
        PWM_Timer0_Stop();
     e62:	0e 94 80 16 	call	0x2d00	; 0x2d00 <PWM_Timer0_Stop>
     e66:	1c c0       	rjmp	.+56     	; 0xea0 <BUZZER_sound+0x50>
        /*
         * Convert distance to a sound level to a percentage value
         * 30 cm -> 0 sound level
         *  2 cm -> 100 sound level
         * */
        sound_level = ((MAX_DISTANCE - sound_level) / (MAX_DISTANCE - 2)) * 100;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8e e1       	ldi	r24, 0x1E	; 30
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	82 1b       	sub	r24, r18
     e74:	93 0b       	sbc	r25, r19
     e76:	2c e1       	ldi	r18, 0x1C	; 28
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	b9 01       	movw	r22, r18
     e7c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__divmodhi4>
     e80:	cb 01       	movw	r24, r22
     e82:	9c 01       	movw	r18, r24
     e84:	84 e6       	ldi	r24, 0x64	; 100
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	ac 01       	movw	r20, r24
     e8a:	24 9f       	mul	r18, r20
     e8c:	c0 01       	movw	r24, r0
     e8e:	25 9f       	mul	r18, r21
     e90:	90 0d       	add	r25, r0
     e92:	34 9f       	mul	r19, r20
     e94:	90 0d       	add	r25, r0
     e96:	11 24       	eor	r1, r1
     e98:	89 83       	std	Y+1, r24	; 0x01

        /* Start PWM generation with the calculated sound level */
        PWM_Timer0_Start(sound_level);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <PWM_Timer0_Start>
    }


}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <GPIO_setupPinDirection+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <GPIO_setupPinDirection+0x8>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
     eba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <GPIO_setupPinDirection+0x1c>
     ec2:	d5 c0       	rjmp	.+426    	; 0x106e <GPIO_setupPinDirection+0x1c6>
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	08 f0       	brcs	.+2      	; 0xecc <GPIO_setupPinDirection+0x24>
     eca:	d1 c0       	rjmp	.+418    	; 0x106e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	3d 83       	std	Y+5, r19	; 0x05
     ed4:	2c 83       	std	Y+4, r18	; 0x04
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <GPIO_setupPinDirection+0x3a>
     ee0:	43 c0       	rjmp	.+134    	; 0xf68 <GPIO_setupPinDirection+0xc0>
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	2c f4       	brge	.+10     	; 0xef6 <GPIO_setupPinDirection+0x4e>
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	71 f0       	breq	.+28     	; 0xf10 <GPIO_setupPinDirection+0x68>
     ef4:	bc c0       	rjmp	.+376    	; 0x106e <GPIO_setupPinDirection+0x1c6>
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	3d 81       	ldd	r19, Y+5	; 0x05
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <GPIO_setupPinDirection+0x5a>
     f00:	5f c0       	rjmp	.+190    	; 0xfc0 <GPIO_setupPinDirection+0x118>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <GPIO_setupPinDirection+0x66>
     f0c:	85 c0       	rjmp	.+266    	; 0x1018 <GPIO_setupPinDirection+0x170>
     f0e:	af c0       	rjmp	.+350    	; 0x106e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	a1 f4       	brne	.+40     	; 0xf3e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_setupPinDirection+0x8c>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_setupPinDirection+0x88>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	98 c0       	rjmp	.+304    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f3e:	aa e3       	ldi	r26, 0x3A	; 58
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e3       	ldi	r30, 0x3A	; 58
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <GPIO_setupPinDirection+0xb4>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <GPIO_setupPinDirection+0xb0>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	83 c0       	rjmp	.+262    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_setupPinDirection+0xe4>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_setupPinDirection+0xe0>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	6c c0       	rjmp	.+216    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f96:	a7 e3       	ldi	r26, 0x37	; 55
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e3       	ldi	r30, 0x37	; 55
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_setupPinDirection+0x10c>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_setupPinDirection+0x108>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	57 c0       	rjmp	.+174    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fc6:	a4 e3       	ldi	r26, 0x34	; 52
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e4 e3       	ldi	r30, 0x34	; 52
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_setupPinDirection+0x13c>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_setupPinDirection+0x138>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	40 c0       	rjmp	.+128    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fee:	a4 e3       	ldi	r26, 0x34	; 52
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_setupPinDirection+0x164>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_setupPinDirection+0x160>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	2b c0       	rjmp	.+86     	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    101e:	a1 e3       	ldi	r26, 0x31	; 49
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e1 e3       	ldi	r30, 0x31	; 49
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0x194>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0x190>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	14 c0       	rjmp	.+40     	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1046:	a1 e3       	ldi	r26, 0x31	; 49
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_setupPinDirection+0x1bc>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_setupPinDirection+0x1b8>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <GPIO_writePin+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_writePin+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
    1090:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 30       	cpi	r24, 0x08	; 8
    1096:	08 f0       	brcs	.+2      	; 0x109a <GPIO_writePin+0x1c>
    1098:	d5 c0       	rjmp	.+426    	; 0x1244 <GPIO_writePin+0x1c6>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <GPIO_writePin+0x24>
    10a0:	d1 c0       	rjmp	.+418    	; 0x1244 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <GPIO_writePin+0x3a>
    10b6:	43 c0       	rjmp	.+134    	; 0x113e <GPIO_writePin+0xc0>
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <GPIO_writePin+0x4e>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <GPIO_writePin+0x68>
    10ca:	bc c0       	rjmp	.+376    	; 0x1244 <GPIO_writePin+0x1c6>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_writePin+0x5a>
    10d6:	5f c0       	rjmp	.+190    	; 0x1196 <GPIO_writePin+0x118>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <GPIO_writePin+0x66>
    10e2:	85 c0       	rjmp	.+266    	; 0x11ee <GPIO_writePin+0x170>
    10e4:	af c0       	rjmp	.+350    	; 0x1244 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	a1 f4       	brne	.+40     	; 0x1114 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10ec:	ab e3       	ldi	r26, 0x3B	; 59
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	eb e3       	ldi	r30, 0x3B	; 59
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_writePin+0x8c>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_writePin+0x88>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	98 c0       	rjmp	.+304    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1114:	ab e3       	ldi	r26, 0x3B	; 59
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_writePin+0xb4>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_writePin+0xb0>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	83 c0       	rjmp	.+262    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f4       	brne	.+40     	; 0x116c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_writePin+0xe4>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_writePin+0xe0>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	6c c0       	rjmp	.+216    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    116c:	a8 e3       	ldi	r26, 0x38	; 56
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e8 e3       	ldi	r30, 0x38	; 56
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_writePin+0x10c>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_writePin+0x108>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	57 c0       	rjmp	.+174    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0x13c>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0x138>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	40 c0       	rjmp	.+128    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_writePin+0x164>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_writePin+0x160>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	2b c0       	rjmp	.+86     	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	a1 f4       	brne	.+40     	; 0x121c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x194>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x190>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    121c:	a2 e3       	ldi	r26, 0x32	; 50
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_writePin+0x1bc>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_writePin+0x1b8>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <GPIO_readPin+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_readPin+0x8>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1266:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <GPIO_readPin+0x1c>
    126e:	84 c0       	rjmp	.+264    	; 0x1378 <GPIO_readPin+0x124>
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	08 f0       	brcs	.+2      	; 0x1278 <GPIO_readPin+0x24>
    1276:	80 c0       	rjmp	.+256    	; 0x1378 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3d 83       	std	Y+5, r19	; 0x05
    1280:	2c 83       	std	Y+4, r18	; 0x04
    1282:	4c 81       	ldd	r20, Y+4	; 0x04
    1284:	5d 81       	ldd	r21, Y+5	; 0x05
    1286:	41 30       	cpi	r20, 0x01	; 1
    1288:	51 05       	cpc	r21, r1
    128a:	79 f1       	breq	.+94     	; 0x12ea <GPIO_readPin+0x96>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	34 f4       	brge	.+12     	; 0x12a2 <GPIO_readPin+0x4e>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	69 f0       	breq	.+26     	; 0x12ba <GPIO_readPin+0x66>
    12a0:	6b c0       	rjmp	.+214    	; 0x1378 <GPIO_readPin+0x124>
    12a2:	4c 81       	ldd	r20, Y+4	; 0x04
    12a4:	5d 81       	ldd	r21, Y+5	; 0x05
    12a6:	42 30       	cpi	r20, 0x02	; 2
    12a8:	51 05       	cpc	r21, r1
    12aa:	b9 f1       	breq	.+110    	; 0x131a <GPIO_readPin+0xc6>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <GPIO_readPin+0x64>
    12b6:	49 c0       	rjmp	.+146    	; 0x134a <GPIO_readPin+0xf6>
    12b8:	5f c0       	rjmp	.+190    	; 0x1378 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12ba:	e9 e3       	ldi	r30, 0x39	; 57
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_readPin+0x7e>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_readPin+0x7a>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	49 c0       	rjmp	.+146    	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	47 c0       	rjmp	.+142    	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_readPin+0xae>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_readPin+0xaa>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	88 23       	and	r24, r24
    130e:	19 f0       	breq	.+6      	; 0x1316 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	31 c0       	rjmp	.+98     	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1316:	19 82       	std	Y+1, r1	; 0x01
    1318:	2f c0       	rjmp	.+94     	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    131a:	e3 e3       	ldi	r30, 0x33	; 51
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_readPin+0xde>
    132e:	55 95       	asr	r21
    1330:	47 95       	ror	r20
    1332:	8a 95       	dec	r24
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_readPin+0xda>
    1336:	ca 01       	movw	r24, r20
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	90 70       	andi	r25, 0x00	; 0
    133c:	88 23       	and	r24, r24
    133e:	19 f0       	breq	.+6      	; 0x1346 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	19 c0       	rjmp	.+50     	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1346:	19 82       	std	Y+1, r1	; 0x01
    1348:	17 c0       	rjmp	.+46     	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_readPin+0x10e>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_readPin+0x10a>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	19 f0       	breq	.+6      	; 0x1376 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1376:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_setupPortDirection+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_setupPortDirection+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	90 f5       	brcc	.+100    	; 0x1404 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	d1 f0       	breq	.+52     	; 0x13e8 <GPIO_setupPortDirection+0x5e>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <GPIO_setupPortDirection+0x3e>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <GPIO_setupPortDirection+0x54>
    13c6:	1e c0       	rjmp	.+60     	; 0x1404 <GPIO_setupPortDirection+0x7a>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <GPIO_setupPortDirection+0x68>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <GPIO_setupPortDirection+0x72>
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13de:	ea e3       	ldi	r30, 0x3A	; 58
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13e8:	e7 e3       	ldi	r30, 0x37	; 55
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13f2:	e4 e3       	ldi	r30, 0x34	; 52
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13fc:	e1 e3       	ldi	r30, 0x31	; 49
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
			break;
		}
	}
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GPIO_writePort+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <GPIO_writePort+0x8>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	90 f5       	brcc	.+100    	; 0x148c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	d1 f0       	breq	.+52     	; 0x1470 <GPIO_writePort+0x5e>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <GPIO_writePort+0x3e>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 f0       	breq	.+24     	; 0x1466 <GPIO_writePort+0x54>
    144e:	1e c0       	rjmp	.+60     	; 0x148c <GPIO_writePort+0x7a>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <GPIO_writePort+0x68>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <GPIO_writePort+0x72>
    1464:	13 c0       	rjmp	.+38     	; 0x148c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1466:	eb e3       	ldi	r30, 0x3B	; 59
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	0e c0       	rjmp	.+28     	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	09 c0       	rjmp	.+18     	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	04 c0       	rjmp	.+8      	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
			break;
		}
	}
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_readPort+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_readPort+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14a8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	90 f5       	brcc	.+100    	; 0x1514 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	d1 f0       	breq	.+52     	; 0x14f8 <GPIO_readPort+0x5e>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <GPIO_readPort+0x3e>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <GPIO_readPort+0x54>
    14d6:	1e c0       	rjmp	.+60     	; 0x1514 <GPIO_readPort+0x7a>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <GPIO_readPort+0x68>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <GPIO_readPort+0x72>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14ee:	e9 e3       	ldi	r30, 0x39	; 57
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14f8:	e6 e3       	ldi	r30, 0x36	; 54
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1502:	e3 e3       	ldi	r30, 0x33	; 51
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    150c:	e0 e3       	ldi	r30, 0x30	; 48
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <__vector_6>:

/*
 * Description : ISR to Handle a specific function passed to the ICU.
 */
ISR(TIMER1_CAPT_vect)
{
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	/* check if the pointer is not equal null */
	if (g_CallBackFunction != NULL_PTR)
    154e:	80 91 94 01 	lds	r24, 0x0194
    1552:	90 91 95 01 	lds	r25, 0x0195
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	29 f0       	breq	.+10     	; 0x1564 <__vector_6+0x40>
	{
		/* call back the function passed to you */
		(*g_CallBackFunction)();
    155a:	e0 91 94 01 	lds	r30, 0x0194
    155e:	f0 91 95 01 	lds	r31, 0x0195
    1562:	09 95       	icall
	}
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * config_ptr)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <ICU_init+0x6>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as input pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID,PIN_INPUT);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B); /* Non pwm mode */
    15a2:	ef e4       	ldi	r30, 0x4F	; 79
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8c e0       	ldi	r24, 0x0C	; 12
    15a8:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0x40) | (config_ptr->clock & 0x07);
    15aa:	ae e4       	ldi	r26, 0x4E	; 78
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ee e4       	ldi	r30, 0x4E	; 78
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	98 2f       	mov	r25, r24
    15b6:	90 74       	andi	r25, 0x40	; 64
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	80 81       	ld	r24, Z
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	89 2b       	or	r24, r25
    15c2:	8c 93       	st	X, r24

	/* Select the required edge type in ICES1 bit in TCCR1B Register */
	ICU_edgeSelect (config_ptr->edge);
    15c4:	e9 81       	ldd	r30, Y+1	; 0x01
    15c6:	fa 81       	ldd	r31, Y+2	; 0x02
    15c8:	81 81       	ldd	r24, Z+1	; 0x01
    15ca:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <ICU_edgeSelect>

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    15ce:	ec e4       	ldi	r30, 0x4C	; 76
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	11 82       	std	Z+1, r1	; 0x01
    15d4:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    15d6:	e6 e4       	ldi	r30, 0x46	; 70
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	11 82       	std	Z+1, r1	; 0x01
    15dc:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	SET_BIT(TIMSK, TICIE1);
    15de:	a9 e5       	ldi	r26, 0x59	; 89
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e9 e5       	ldi	r30, 0x59	; 89
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 62       	ori	r24, 0x20	; 32
    15ea:	8c 93       	st	X, r24

}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <ICU_edgeSelect>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_edgeSelect (const ICU_EdgeType edge)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <ICU_edgeSelect+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3b 83       	std	Y+3, r19	; 0x03
    160c:	2a 83       	std	Y+2, r18	; 0x02
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	31 f0       	breq	.+12     	; 0x1622 <ICU_edgeSelect+0x2c>
    1616:	2a 81       	ldd	r18, Y+2	; 0x02
    1618:	3b 81       	ldd	r19, Y+3	; 0x03
    161a:	21 30       	cpi	r18, 0x01	; 1
    161c:	31 05       	cpc	r19, r1
    161e:	49 f0       	breq	.+18     	; 0x1632 <ICU_edgeSelect+0x3c>
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <ICU_edgeSelect+0x4a>
	{
		case FALLING:
			CLEAR_BIT(TCCR1B, ICES1);/* Activate ICU with Falling Edge */
    1622:	ae e4       	ldi	r26, 0x4E	; 78
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7b       	andi	r24, 0xBF	; 191
    162e:	8c 93       	st	X, r24
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <ICU_edgeSelect+0x4a>
			break;
		case RISING:
			SET_BIT(TCCR1B, ICES1);  /* Activate ICU with Rising Edge */
    1632:	ae e4       	ldi	r26, 0x4E	; 78
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 64       	ori	r24, 0x40	; 64
    163e:	8c 93       	st	X, r24
			break;
		default:
			/* Do nothing*/
			break;
	}
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <ICU_setCallBackFunction>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBackFunction (void (*ptr_func)(void))
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <ICU_setCallBackFunction+0x6>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_CallBackFunction = (void*) ptr_func;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	90 93 95 01 	sts	0x0195, r25
    1662:	80 93 94 01 	sts	0x0194, r24
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1678:	e6 e4       	ldi	r30, 0x46	; 70
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <ICU_resetTimer>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_resetTimer(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    168e:	ec e4       	ldi	r30, 0x4C	; 76
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	11 82       	std	Z+1, r1	; 0x01
    1694:	10 82       	st	Z, r1
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit (void)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers Turn off the timer */
	TCCR1A = 0;
    16a4:	ef e4       	ldi	r30, 0x4F	; 79
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	10 82       	st	Z, r1
	TCCR1B = 0;
    16aa:	ee e4       	ldi	r30, 0x4E	; 78
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
	TCNT1 = 0;
    16b0:	ec e4       	ldi	r30, 0x4C	; 76
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	11 82       	std	Z+1, r1	; 0x01
    16b6:	10 82       	st	Z, r1
	ICR1 = 0;
    16b8:	e6 e4       	ldi	r30, 0x46	; 70
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	11 82       	std	Z+1, r1	; 0x01
    16be:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLEAR_BIT(TIMSK, TICIE1);
    16c0:	a9 e5       	ldi	r26, 0x59	; 89
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e9 e5       	ldi	r30, 0x59	; 89
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7d       	andi	r24, 0xDF	; 223
    16cc:	8c 93       	st	X, r24

	/* Reset the call back function pointer */
	g_CallBackFunction = NULL_PTR;
    16ce:	10 92 95 01 	sts	0x0195, r1
    16d2:	10 92 94 01 	sts	0x0194, r1
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <LCD_SendCommand>:

/*
 * Function to send a command to the LCD
 */
void LCD_SendCommand(uint8 command)
{
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	c1 56       	subi	r28, 0x61	; 97
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	fe 01       	movw	r30, r28
    16f8:	ef 59       	subi	r30, 0x9F	; 159
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1708:	fe 01       	movw	r30, r28
    170a:	e3 5a       	subi	r30, 0xA3	; 163
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e4       	ldi	r27, 0x40	; 64
    1716:	80 83       	st	Z, r24
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	a2 83       	std	Z+2, r26	; 0x02
    171c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    171e:	8e 01       	movw	r16, r28
    1720:	07 5a       	subi	r16, 0xA7	; 167
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	fe 01       	movw	r30, r28
    1726:	e3 5a       	subi	r30, 0xA3	; 163
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	2b ea       	ldi	r18, 0xAB	; 171
    1734:	3a ea       	ldi	r19, 0xAA	; 170
    1736:	4a e2       	ldi	r20, 0x2A	; 42
    1738:	50 e4       	ldi	r21, 0x40	; 64
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	f8 01       	movw	r30, r16
    1744:	80 83       	st	Z, r24
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	a2 83       	std	Z+2, r26	; 0x02
    174a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    174c:	fe 01       	movw	r30, r28
    174e:	e7 5a       	subi	r30, 0xA7	; 167
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	34 f4       	brge	.+12     	; 0x1776 <LCD_SendCommand+0x9a>
		__ticks = 1;
    176a:	fe 01       	movw	r30, r28
    176c:	e8 5a       	subi	r30, 0xA8	; 168
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 83       	st	Z, r24
    1774:	e0 c0       	rjmp	.+448    	; 0x1936 <LCD_SendCommand+0x25a>
	else if (__tmp > 255)
    1776:	fe 01       	movw	r30, r28
    1778:	e7 5a       	subi	r30, 0xA7	; 167
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	53 e4       	ldi	r21, 0x43	; 67
    178c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	0c f0       	brlt	.+2      	; 0x1796 <LCD_SendCommand+0xba>
    1794:	c0 c0       	rjmp	.+384    	; 0x1916 <LCD_SendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1796:	fe 01       	movw	r30, r28
    1798:	e3 5a       	subi	r30, 0xA3	; 163
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	fe 01       	movw	r30, r28
    17b6:	ec 5a       	subi	r30, 0xAC	; 172
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 83       	st	Z, r24
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	a2 83       	std	Z+2, r26	; 0x02
    17c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	8e 01       	movw	r16, r28
    17c4:	00 5b       	subi	r16, 0xB0	; 176
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	fe 01       	movw	r30, r28
    17ca:	ec 5a       	subi	r30, 0xAC	; 172
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a ef       	ldi	r20, 0xFA	; 250
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f0:	fe 01       	movw	r30, r28
    17f2:	e0 5b       	subi	r30, 0xB0	; 176
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	44 f4       	brge	.+16     	; 0x181e <LCD_SendCommand+0x142>
		__ticks = 1;
    180e:	fe 01       	movw	r30, r28
    1810:	e2 5b       	subi	r30, 0xB2	; 178
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	64 c0       	rjmp	.+200    	; 0x18e6 <LCD_SendCommand+0x20a>
	else if (__tmp > 65535)
    181e:	fe 01       	movw	r30, r28
    1820:	e0 5b       	subi	r30, 0xB0	; 176
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	0c f0       	brlt	.+2      	; 0x183e <LCD_SendCommand+0x162>
    183c:	43 c0       	rjmp	.+134    	; 0x18c4 <LCD_SendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	fe 01       	movw	r30, r28
    1840:	ec 5a       	subi	r30, 0xAC	; 172
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8e 01       	movw	r16, r28
    185e:	02 5b       	subi	r16, 0xB2	; 178
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	1f c0       	rjmp	.+62     	; 0x18b4 <LCD_SendCommand+0x1d8>
    1876:	fe 01       	movw	r30, r28
    1878:	e4 5b       	subi	r30, 0xB4	; 180
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1884:	fe 01       	movw	r30, r28
    1886:	e4 5b       	subi	r30, 0xB4	; 180
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_SendCommand+0x1b2>
    1892:	fe 01       	movw	r30, r28
    1894:	e4 5b       	subi	r30, 0xB4	; 180
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189c:	de 01       	movw	r26, r28
    189e:	a2 5b       	subi	r26, 0xB2	; 178
    18a0:	bf 4f       	sbci	r27, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e2 5b       	subi	r30, 0xB2	; 178
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	11 96       	adiw	r26, 0x01	; 1
    18b0:	9c 93       	st	X, r25
    18b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	fe 01       	movw	r30, r28
    18b6:	e2 5b       	subi	r30, 0xB2	; 178
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	d1 f6       	brne	.-76     	; 0x1876 <LCD_SendCommand+0x19a>
    18c2:	4b c0       	rjmp	.+150    	; 0x195a <LCD_SendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	8e 01       	movw	r16, r28
    18c6:	02 5b       	subi	r16, 0xB2	; 178
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	fe 01       	movw	r30, r28
    18cc:	e0 5b       	subi	r30, 0xB0	; 176
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	f8 01       	movw	r30, r16
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	de 01       	movw	r26, r28
    18e8:	a6 5b       	subi	r26, 0xB6	; 182
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	e2 5b       	subi	r30, 0xB2	; 178
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	11 96       	adiw	r26, 0x01	; 1
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
    18fc:	fe 01       	movw	r30, r28
    18fe:	e6 5b       	subi	r30, 0xB6	; 182
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_SendCommand+0x22a>
    190a:	fe 01       	movw	r30, r28
    190c:	e6 5b       	subi	r30, 0xB6	; 182
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	22 c0       	rjmp	.+68     	; 0x195a <LCD_SendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1916:	8e 01       	movw	r16, r28
    1918:	08 5a       	subi	r16, 0xA8	; 168
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	e7 5a       	subi	r30, 0xA7	; 167
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	80 83       	st	Z, r24
    1936:	de 01       	movw	r26, r28
    1938:	a7 5b       	subi	r26, 0xB7	; 183
    193a:	bf 4f       	sbci	r27, 0xFF	; 255
    193c:	fe 01       	movw	r30, r28
    193e:	e8 5a       	subi	r30, 0xA8	; 168
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 81       	ld	r24, Z
    1944:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1946:	fe 01       	movw	r30, r28
    1948:	e7 5b       	subi	r30, 0xB7	; 183
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	8a 95       	dec	r24
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_SendCommand+0x272>
    1952:	fe 01       	movw	r30, r28
    1954:	e7 5b       	subi	r30, 0xB7	; 183
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1964:	fe 01       	movw	r30, r28
    1966:	eb 5b       	subi	r30, 0xBB	; 187
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	80 83       	st	Z, r24
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	a2 83       	std	Z+2, r26	; 0x02
    1978:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    197a:	8e 01       	movw	r16, r28
    197c:	0f 5b       	subi	r16, 0xBF	; 191
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	fe 01       	movw	r30, r28
    1982:	eb 5b       	subi	r30, 0xBB	; 187
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	2b ea       	ldi	r18, 0xAB	; 171
    1990:	3a ea       	ldi	r19, 0xAA	; 170
    1992:	4a e2       	ldi	r20, 0x2A	; 42
    1994:	50 e4       	ldi	r21, 0x40	; 64
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	80 83       	st	Z, r24
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	a2 83       	std	Z+2, r26	; 0x02
    19a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 5b       	subi	r30, 0xBF	; 191
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	34 f4       	brge	.+12     	; 0x19d2 <LCD_SendCommand+0x2f6>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	fe 01       	movw	r30, r28
    19ca:	e0 5c       	subi	r30, 0xC0	; 192
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 83       	st	Z, r24
    19d0:	9d c0       	rjmp	.+314    	; 0x1b0c <LCD_SendCommand+0x430>
	else if (__tmp > 255)
    19d2:	fe 01       	movw	r30, r28
    19d4:	ef 5b       	subi	r30, 0xBF	; 191
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	53 e4       	ldi	r21, 0x43	; 67
    19e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	0c f0       	brlt	.+2      	; 0x19f2 <LCD_SendCommand+0x316>
    19f0:	7e c0       	rjmp	.+252    	; 0x1aee <LCD_SendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    19f2:	fe 01       	movw	r30, r28
    19f4:	eb 5b       	subi	r30, 0xBB	; 187
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	54 e4       	ldi	r21, 0x44	; 68
    1a08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8c af       	std	Y+60, r24	; 0x3c
    1a12:	9d af       	std	Y+61, r25	; 0x3d
    1a14:	ae af       	std	Y+62, r26	; 0x3e
    1a16:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	88 af       	std	Y+56, r24	; 0x38
    1a32:	99 af       	std	Y+57, r25	; 0x39
    1a34:	aa af       	std	Y+58, r26	; 0x3a
    1a36:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1a38:	68 ad       	ldd	r22, Y+56	; 0x38
    1a3a:	79 ad       	ldd	r23, Y+57	; 0x39
    1a3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_SendCommand+0x37e>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9f ab       	std	Y+55, r25	; 0x37
    1a56:	8e ab       	std	Y+54, r24	; 0x36
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_SendCommand+0x3fc>
	else if (__tmp > 65535)
    1a5a:	68 ad       	ldd	r22, Y+56	; 0x38
    1a5c:	79 ad       	ldd	r23, Y+57	; 0x39
    1a5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a60:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_SendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a74:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a76:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a78:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9f ab       	std	Y+55, r25	; 0x37
    1a98:	8e ab       	std	Y+54, r24	; 0x36
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_SendCommand+0x3de>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9d ab       	std	Y+53, r25	; 0x35
    1aa2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa4:	8c a9       	ldd	r24, Y+52	; 0x34
    1aa6:	9d a9       	ldd	r25, Y+53	; 0x35
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_SendCommand+0x3cc>
    1aac:	9d ab       	std	Y+53, r25	; 0x35
    1aae:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ab2:	9f a9       	ldd	r25, Y+55	; 0x37
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9f ab       	std	Y+55, r25	; 0x37
    1ab8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8e a9       	ldd	r24, Y+54	; 0x36
    1abc:	9f a9       	ldd	r25, Y+55	; 0x37
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_SendCommand+0x3c0>
    1ac2:	2d c0       	rjmp	.+90     	; 0x1b1e <LCD_SendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	68 ad       	ldd	r22, Y+56	; 0x38
    1ac6:	79 ad       	ldd	r23, Y+57	; 0x39
    1ac8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aca:	9b ad       	ldd	r25, Y+59	; 0x3b
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9f ab       	std	Y+55, r25	; 0x37
    1ad6:	8e ab       	std	Y+54, r24	; 0x36
    1ad8:	8e a9       	ldd	r24, Y+54	; 0x36
    1ada:	9f a9       	ldd	r25, Y+55	; 0x37
    1adc:	9b ab       	std	Y+51, r25	; 0x33
    1ade:	8a ab       	std	Y+50, r24	; 0x32
    1ae0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ae2:	9b a9       	ldd	r25, Y+51	; 0x33
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_SendCommand+0x408>
    1ae8:	9b ab       	std	Y+51, r25	; 0x33
    1aea:	8a ab       	std	Y+50, r24	; 0x32
    1aec:	18 c0       	rjmp	.+48     	; 0x1b1e <LCD_SendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aee:	fe 01       	movw	r30, r28
    1af0:	ef 5b       	subi	r30, 0xBF	; 191
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	fe 01       	movw	r30, r28
    1b06:	e0 5c       	subi	r30, 0xC0	; 192
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 83       	st	Z, r24
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e0 5c       	subi	r30, 0xC0	; 192
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b16:	89 a9       	ldd	r24, Y+49	; 0x31
    1b18:	8a 95       	dec	r24
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_SendCommand+0x43c>
    1b1c:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the command accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, command);
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ef 59       	subi	r30, 0x9F	; 159
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	60 81       	ld	r22, Z
    1b28:	0e 94 09 0a 	call	0x1412	; 0x1412 <GPIO_writePort>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e4       	ldi	r27, 0x40	; 64
    1b34:	8d a7       	std	Y+45, r24	; 0x2d
    1b36:	9e a7       	std	Y+46, r25	; 0x2e
    1b38:	af a7       	std	Y+47, r26	; 0x2f
    1b3a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b3c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b3e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	2b ea       	ldi	r18, 0xAB	; 171
    1b46:	3a ea       	ldi	r19, 0xAA	; 170
    1b48:	4a e2       	ldi	r20, 0x2A	; 42
    1b4a:	50 e4       	ldi	r21, 0x40	; 64
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	89 a7       	std	Y+41, r24	; 0x29
    1b56:	9a a7       	std	Y+42, r25	; 0x2a
    1b58:	ab a7       	std	Y+43, r26	; 0x2b
    1b5a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b5c:	69 a5       	ldd	r22, Y+41	; 0x29
    1b5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	1c f4       	brge	.+6      	; 0x1b7a <LCD_SendCommand+0x49e>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	88 a7       	std	Y+40, r24	; 0x28
    1b78:	91 c0       	rjmp	.+290    	; 0x1c9c <LCD_SendCommand+0x5c0>
	else if (__tmp > 255)
    1b7a:	69 a5       	ldd	r22, Y+41	; 0x29
    1b7c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	53 e4       	ldi	r21, 0x43	; 67
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <LCD_SendCommand+0x4b8>
    1b92:	7b c0       	rjmp	.+246    	; 0x1c8a <LCD_SendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    1b94:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b96:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a e7       	ldi	r20, 0x7A	; 122
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8c a3       	std	Y+36, r24	; 0x24
    1bae:	9d a3       	std	Y+37, r25	; 0x25
    1bb0:	ae a3       	std	Y+38, r26	; 0x26
    1bb2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6c a1       	ldd	r22, Y+36	; 0x24
    1bb6:	7d a1       	ldd	r23, Y+37	; 0x25
    1bb8:	8e a1       	ldd	r24, Y+38	; 0x26
    1bba:	9f a1       	ldd	r25, Y+39	; 0x27
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	88 a3       	std	Y+32, r24	; 0x20
    1bce:	99 a3       	std	Y+33, r25	; 0x21
    1bd0:	aa a3       	std	Y+34, r26	; 0x22
    1bd2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1bd4:	68 a1       	ldd	r22, Y+32	; 0x20
    1bd6:	79 a1       	ldd	r23, Y+33	; 0x21
    1bd8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bda:	9b a1       	ldd	r25, Y+35	; 0x23
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_SendCommand+0x51a>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9f 8f       	std	Y+31, r25	; 0x1f
    1bf2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_SendCommand+0x598>
	else if (__tmp > 65535)
    1bf6:	68 a1       	ldd	r22, Y+32	; 0x20
    1bf8:	79 a1       	ldd	r23, Y+33	; 0x21
    1bfa:	8a a1       	ldd	r24, Y+34	; 0x22
    1bfc:	9b a1       	ldd	r25, Y+35	; 0x23
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_SendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c10:	7d a1       	ldd	r23, Y+37	; 0x25
    1c12:	8e a1       	ldd	r24, Y+38	; 0x26
    1c14:	9f a1       	ldd	r25, Y+39	; 0x27
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9f 8f       	std	Y+31, r25	; 0x1f
    1c34:	8e 8f       	std	Y+30, r24	; 0x1e
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_SendCommand+0x57a>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c3e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_SendCommand+0x568>
    1c48:	9d 8f       	std	Y+29, r25	; 0x1d
    1c4a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9f 8f       	std	Y+31, r25	; 0x1f
    1c54:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_SendCommand+0x55c>
    1c5e:	24 c0       	rjmp	.+72     	; 0x1ca8 <LCD_SendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	68 a1       	ldd	r22, Y+32	; 0x20
    1c62:	79 a1       	ldd	r23, Y+33	; 0x21
    1c64:	8a a1       	ldd	r24, Y+34	; 0x22
    1c66:	9b a1       	ldd	r25, Y+35	; 0x23
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9f 8f       	std	Y+31, r25	; 0x1f
    1c72:	8e 8f       	std	Y+30, r24	; 0x1e
    1c74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c78:	9b 8f       	std	Y+27, r25	; 0x1b
    1c7a:	8a 8f       	std	Y+26, r24	; 0x1a
    1c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_SendCommand+0x5a4>
    1c84:	9b 8f       	std	Y+27, r25	; 0x1b
    1c86:	8a 8f       	std	Y+26, r24	; 0x1a
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_SendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c8a:	69 a5       	ldd	r22, Y+41	; 0x29
    1c8c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	88 a7       	std	Y+40, r24	; 0x28
    1c9c:	88 a5       	ldd	r24, Y+40	; 0x28
    1c9e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ca0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca2:	8a 95       	dec	r24
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_SendCommand+0x5c6>
    1ca6:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	b0 e4       	ldi	r27, 0x40	; 64
    1cba:	8d 8b       	std	Y+21, r24	; 0x15
    1cbc:	9e 8b       	std	Y+22, r25	; 0x16
    1cbe:	af 8b       	std	Y+23, r26	; 0x17
    1cc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cca:	2b ea       	ldi	r18, 0xAB	; 171
    1ccc:	3a ea       	ldi	r19, 0xAA	; 170
    1cce:	4a e2       	ldi	r20, 0x2A	; 42
    1cd0:	50 e4       	ldi	r21, 0x40	; 64
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	89 8b       	std	Y+17, r24	; 0x11
    1cdc:	9a 8b       	std	Y+18, r25	; 0x12
    1cde:	ab 8b       	std	Y+19, r26	; 0x13
    1ce0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ce2:	69 89       	ldd	r22, Y+17	; 0x11
    1ce4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	1c f4       	brge	.+6      	; 0x1d00 <LCD_SendCommand+0x624>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	88 8b       	std	Y+16, r24	; 0x10
    1cfe:	91 c0       	rjmp	.+290    	; 0x1e22 <LCD_SendCommand+0x746>
	else if (__tmp > 255)
    1d00:	69 89       	ldd	r22, Y+17	; 0x11
    1d02:	7a 89       	ldd	r23, Y+18	; 0x12
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	53 e4       	ldi	r21, 0x43	; 67
    1d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	0c f0       	brlt	.+2      	; 0x1d1a <LCD_SendCommand+0x63e>
    1d18:	7b c0       	rjmp	.+246    	; 0x1e10 <LCD_SendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    1d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d20:	98 8d       	ldd	r25, Y+24	; 0x18
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a e7       	ldi	r20, 0x7A	; 122
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8c 87       	std	Y+12, r24	; 0x0c
    1d34:	9d 87       	std	Y+13, r25	; 0x0d
    1d36:	ae 87       	std	Y+14, r26	; 0x0e
    1d38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a ef       	ldi	r20, 0xFA	; 250
    1d48:	54 e4       	ldi	r21, 0x44	; 68
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	88 87       	std	Y+8, r24	; 0x08
    1d54:	99 87       	std	Y+9, r25	; 0x09
    1d56:	aa 87       	std	Y+10, r26	; 0x0a
    1d58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d5a:	68 85       	ldd	r22, Y+8	; 0x08
    1d5c:	79 85       	ldd	r23, Y+9	; 0x09
    1d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <LCD_SendCommand+0x6a0>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9f 83       	std	Y+7, r25	; 0x07
    1d78:	8e 83       	std	Y+6, r24	; 0x06
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <LCD_SendCommand+0x71e>
	else if (__tmp > 65535)
    1d7c:	68 85       	ldd	r22, Y+8	; 0x08
    1d7e:	79 85       	ldd	r23, Y+9	; 0x09
    1d80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <LCD_SendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d96:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9f 83       	std	Y+7, r25	; 0x07
    1dba:	8e 83       	std	Y+6, r24	; 0x06
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <LCD_SendCommand+0x700>
    1dbe:	88 ec       	ldi	r24, 0xC8	; 200
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9d 83       	std	Y+5, r25	; 0x05
    1dc4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_SendCommand+0x6ee>
    1dce:	9d 83       	std	Y+5, r25	; 0x05
    1dd0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9f 83       	std	Y+7, r25	; 0x07
    1dda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <LCD_SendCommand+0x6e2>
    1de4:	24 c0       	rjmp	.+72     	; 0x1e2e <LCD_SendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	68 85       	ldd	r22, Y+8	; 0x08
    1de8:	79 85       	ldd	r23, Y+9	; 0x09
    1dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9f 83       	std	Y+7, r25	; 0x07
    1df8:	8e 83       	std	Y+6, r24	; 0x06
    1dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_SendCommand+0x72a>
    1e0a:	9b 83       	std	Y+3, r25	; 0x03
    1e0c:	8a 83       	std	Y+2, r24	; 0x02
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <LCD_SendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e10:	69 89       	ldd	r22, Y+17	; 0x11
    1e12:	7a 89       	ldd	r23, Y+18	; 0x12
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	88 89       	ldd	r24, Y+16	; 0x10
    1e24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	8a 95       	dec	r24
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <LCD_SendCommand+0x74c>
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    1e2e:	cf 59       	subi	r28, 0x9F	; 159
    1e30:	df 4f       	sbci	r29, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <LCD_displayCharacter>:

/*
 * Function to display a character on the LCD
 */
void LCD_displayCharacter(uint8 data)
{
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	c1 56       	subi	r28, 0x61	; 97
    1e54:	d0 40       	sbci	r29, 0x00	; 0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	fe 01       	movw	r30, r28
    1e62:	ef 59       	subi	r30, 0x9F	; 159
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e3 5a       	subi	r30, 0xA3	; 163
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	b0 e4       	ldi	r27, 0x40	; 64
    1e80:	80 83       	st	Z, r24
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	a2 83       	std	Z+2, r26	; 0x02
    1e86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e88:	8e 01       	movw	r16, r28
    1e8a:	07 5a       	subi	r16, 0xA7	; 167
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e3 5a       	subi	r30, 0xA3	; 163
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	2b ea       	ldi	r18, 0xAB	; 171
    1e9e:	3a ea       	ldi	r19, 0xAA	; 170
    1ea0:	4a e2       	ldi	r20, 0x2A	; 42
    1ea2:	50 e4       	ldi	r21, 0x40	; 64
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f8 01       	movw	r30, r16
    1eae:	80 83       	st	Z, r24
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	a2 83       	std	Z+2, r26	; 0x02
    1eb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5a       	subi	r30, 0xA7	; 167
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	34 f4       	brge	.+12     	; 0x1ee0 <LCD_displayCharacter+0x9a>
		__ticks = 1;
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e8 5a       	subi	r30, 0xA8	; 168
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	80 83       	st	Z, r24
    1ede:	e0 c0       	rjmp	.+448    	; 0x20a0 <LCD_displayCharacter+0x25a>
	else if (__tmp > 255)
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e7 5a       	subi	r30, 0xA7	; 167
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	53 e4       	ldi	r21, 0x43	; 67
    1ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	0c f0       	brlt	.+2      	; 0x1f00 <LCD_displayCharacter+0xba>
    1efe:	c0 c0       	rjmp	.+384    	; 0x2080 <LCD_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1f00:	fe 01       	movw	r30, r28
    1f02:	e3 5a       	subi	r30, 0xA3	; 163
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ec 5a       	subi	r30, 0xAC	; 172
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	00 5b       	subi	r16, 0xB0	; 176
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	ec 5a       	subi	r30, 0xAC	; 172
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e0 5b       	subi	r30, 0xB0	; 176
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	44 f4       	brge	.+16     	; 0x1f88 <LCD_displayCharacter+0x142>
		__ticks = 1;
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e2 5b       	subi	r30, 0xB2	; 178
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	64 c0       	rjmp	.+200    	; 0x2050 <LCD_displayCharacter+0x20a>
	else if (__tmp > 65535)
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e0 5b       	subi	r30, 0xB0	; 176
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	0c f0       	brlt	.+2      	; 0x1fa8 <LCD_displayCharacter+0x162>
    1fa6:	43 c0       	rjmp	.+134    	; 0x202e <LCD_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ec 5a       	subi	r30, 0xAC	; 172
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	02 5b       	subi	r16, 0xB2	; 178
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	f8 01       	movw	r30, r16
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    1fde:	1f c0       	rjmp	.+62     	; 0x201e <LCD_displayCharacter+0x1d8>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e4 5b       	subi	r30, 0xB4	; 180
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e4 5b       	subi	r30, 0xB4	; 180
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharacter+0x1b2>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e4 5b       	subi	r30, 0xB4	; 180
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	de 01       	movw	r26, r28
    2008:	a2 5b       	subi	r26, 0xB2	; 178
    200a:	bf 4f       	sbci	r27, 0xFF	; 255
    200c:	fe 01       	movw	r30, r28
    200e:	e2 5b       	subi	r30, 0xB2	; 178
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	9c 93       	st	X, r25
    201c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	fe 01       	movw	r30, r28
    2020:	e2 5b       	subi	r30, 0xB2	; 178
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	d1 f6       	brne	.-76     	; 0x1fe0 <LCD_displayCharacter+0x19a>
    202c:	4b c0       	rjmp	.+150    	; 0x20c4 <LCD_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	8e 01       	movw	r16, r28
    2030:	02 5b       	subi	r16, 0xB2	; 178
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e0 5b       	subi	r30, 0xB0	; 176
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	f8 01       	movw	r30, r16
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    2050:	de 01       	movw	r26, r28
    2052:	a6 5b       	subi	r26, 0xB6	; 182
    2054:	bf 4f       	sbci	r27, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	e2 5b       	subi	r30, 0xB2	; 178
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	9c 93       	st	X, r25
    2064:	8e 93       	st	-X, r24
    2066:	fe 01       	movw	r30, r28
    2068:	e6 5b       	subi	r30, 0xB6	; 182
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_displayCharacter+0x22a>
    2074:	fe 01       	movw	r30, r28
    2076:	e6 5b       	subi	r30, 0xB6	; 182
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
    207e:	22 c0       	rjmp	.+68     	; 0x20c4 <LCD_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2080:	8e 01       	movw	r16, r28
    2082:	08 5a       	subi	r16, 0xA8	; 168
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	fe 01       	movw	r30, r28
    2088:	e7 5a       	subi	r30, 0xA7	; 167
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	de 01       	movw	r26, r28
    20a2:	a7 5b       	subi	r26, 0xB7	; 183
    20a4:	bf 4f       	sbci	r27, 0xFF	; 255
    20a6:	fe 01       	movw	r30, r28
    20a8:	e8 5a       	subi	r30, 0xA8	; 168
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5b       	subi	r30, 0xB7	; 183
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	8a 95       	dec	r24
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_displayCharacter+0x272>
    20bc:	fe 01       	movw	r30, r28
    20be:	e7 5b       	subi	r30, 0xB7	; 183
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    20ce:	fe 01       	movw	r30, r28
    20d0:	eb 5b       	subi	r30, 0xBB	; 187
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e4       	ldi	r27, 0x40	; 64
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e4:	8e 01       	movw	r16, r28
    20e6:	0f 5b       	subi	r16, 0xBF	; 191
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	eb 5b       	subi	r30, 0xBB	; 187
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	2b ea       	ldi	r18, 0xAB	; 171
    20fa:	3a ea       	ldi	r19, 0xAA	; 170
    20fc:	4a e2       	ldi	r20, 0x2A	; 42
    20fe:	50 e4       	ldi	r21, 0x40	; 64
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2112:	fe 01       	movw	r30, r28
    2114:	ef 5b       	subi	r30, 0xBF	; 191
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	34 f4       	brge	.+12     	; 0x213c <LCD_displayCharacter+0x2f6>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	fe 01       	movw	r30, r28
    2134:	e0 5c       	subi	r30, 0xC0	; 192
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 83       	st	Z, r24
    213a:	9d c0       	rjmp	.+314    	; 0x2276 <LCD_displayCharacter+0x430>
	else if (__tmp > 255)
    213c:	fe 01       	movw	r30, r28
    213e:	ef 5b       	subi	r30, 0xBF	; 191
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <LCD_displayCharacter+0x316>
    215a:	7e c0       	rjmp	.+252    	; 0x2258 <LCD_displayCharacter+0x412>
	{
		_delay_ms(__us / 1000.0);
    215c:	fe 01       	movw	r30, r28
    215e:	eb 5b       	subi	r30, 0xBB	; 187
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a e7       	ldi	r20, 0x7A	; 122
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8c af       	std	Y+60, r24	; 0x3c
    217c:	9d af       	std	Y+61, r25	; 0x3d
    217e:	ae af       	std	Y+62, r26	; 0x3e
    2180:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6c ad       	ldd	r22, Y+60	; 0x3c
    2184:	7d ad       	ldd	r23, Y+61	; 0x3d
    2186:	8e ad       	ldd	r24, Y+62	; 0x3e
    2188:	9f ad       	ldd	r25, Y+63	; 0x3f
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	88 af       	std	Y+56, r24	; 0x38
    219c:	99 af       	std	Y+57, r25	; 0x39
    219e:	aa af       	std	Y+58, r26	; 0x3a
    21a0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    21a2:	68 ad       	ldd	r22, Y+56	; 0x38
    21a4:	79 ad       	ldd	r23, Y+57	; 0x39
    21a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    21a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_displayCharacter+0x37e>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9f ab       	std	Y+55, r25	; 0x37
    21c0:	8e ab       	std	Y+54, r24	; 0x36
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <LCD_displayCharacter+0x3fc>
	else if (__tmp > 65535)
    21c4:	68 ad       	ldd	r22, Y+56	; 0x38
    21c6:	79 ad       	ldd	r23, Y+57	; 0x39
    21c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <LCD_displayCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    21de:	7d ad       	ldd	r23, Y+61	; 0x3d
    21e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    21e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9f ab       	std	Y+55, r25	; 0x37
    2202:	8e ab       	std	Y+54, r24	; 0x36
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_displayCharacter+0x3de>
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9d ab       	std	Y+53, r25	; 0x35
    220c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220e:	8c a9       	ldd	r24, Y+52	; 0x34
    2210:	9d a9       	ldd	r25, Y+53	; 0x35
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_displayCharacter+0x3cc>
    2216:	9d ab       	std	Y+53, r25	; 0x35
    2218:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8e a9       	ldd	r24, Y+54	; 0x36
    221c:	9f a9       	ldd	r25, Y+55	; 0x37
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9f ab       	std	Y+55, r25	; 0x37
    2222:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8e a9       	ldd	r24, Y+54	; 0x36
    2226:	9f a9       	ldd	r25, Y+55	; 0x37
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_displayCharacter+0x3c0>
    222c:	2d c0       	rjmp	.+90     	; 0x2288 <LCD_displayCharacter+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	68 ad       	ldd	r22, Y+56	; 0x38
    2230:	79 ad       	ldd	r23, Y+57	; 0x39
    2232:	8a ad       	ldd	r24, Y+58	; 0x3a
    2234:	9b ad       	ldd	r25, Y+59	; 0x3b
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9f ab       	std	Y+55, r25	; 0x37
    2240:	8e ab       	std	Y+54, r24	; 0x36
    2242:	8e a9       	ldd	r24, Y+54	; 0x36
    2244:	9f a9       	ldd	r25, Y+55	; 0x37
    2246:	9b ab       	std	Y+51, r25	; 0x33
    2248:	8a ab       	std	Y+50, r24	; 0x32
    224a:	8a a9       	ldd	r24, Y+50	; 0x32
    224c:	9b a9       	ldd	r25, Y+51	; 0x33
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_displayCharacter+0x408>
    2252:	9b ab       	std	Y+51, r25	; 0x33
    2254:	8a ab       	std	Y+50, r24	; 0x32
    2256:	18 c0       	rjmp	.+48     	; 0x2288 <LCD_displayCharacter+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2258:	fe 01       	movw	r30, r28
    225a:	ef 5b       	subi	r30, 0xBF	; 191
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	fe 01       	movw	r30, r28
    2270:	e0 5c       	subi	r30, 0xC0	; 192
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 83       	st	Z, r24
    2276:	fe 01       	movw	r30, r28
    2278:	e0 5c       	subi	r30, 0xC0	; 192
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2280:	89 a9       	ldd	r24, Y+49	; 0x31
    2282:	8a 95       	dec	r24
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_displayCharacter+0x43c>
    2286:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the data accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, data);
    2288:	fe 01       	movw	r30, r28
    228a:	ef 59       	subi	r30, 0x9F	; 159
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	60 81       	ld	r22, Z
    2292:	0e 94 09 0a 	call	0x1412	; 0x1412 <GPIO_writePort>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e0       	ldi	r26, 0x00	; 0
    229c:	b0 e4       	ldi	r27, 0x40	; 64
    229e:	8d a7       	std	Y+45, r24	; 0x2d
    22a0:	9e a7       	std	Y+46, r25	; 0x2e
    22a2:	af a7       	std	Y+47, r26	; 0x2f
    22a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    22a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    22aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ac:	98 a9       	ldd	r25, Y+48	; 0x30
    22ae:	2b ea       	ldi	r18, 0xAB	; 171
    22b0:	3a ea       	ldi	r19, 0xAA	; 170
    22b2:	4a e2       	ldi	r20, 0x2A	; 42
    22b4:	50 e4       	ldi	r21, 0x40	; 64
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	89 a7       	std	Y+41, r24	; 0x29
    22c0:	9a a7       	std	Y+42, r25	; 0x2a
    22c2:	ab a7       	std	Y+43, r26	; 0x2b
    22c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22c6:	69 a5       	ldd	r22, Y+41	; 0x29
    22c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    22ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    22cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22da:	88 23       	and	r24, r24
    22dc:	1c f4       	brge	.+6      	; 0x22e4 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	88 a7       	std	Y+40, r24	; 0x28
    22e2:	91 c0       	rjmp	.+290    	; 0x2406 <LCD_displayCharacter+0x5c0>
	else if (__tmp > 255)
    22e4:	69 a5       	ldd	r22, Y+41	; 0x29
    22e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    22e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	53 e4       	ldi	r21, 0x43	; 67
    22f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	0c f0       	brlt	.+2      	; 0x22fe <LCD_displayCharacter+0x4b8>
    22fc:	7b c0       	rjmp	.+246    	; 0x23f4 <LCD_displayCharacter+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    22fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2300:	7e a5       	ldd	r23, Y+46	; 0x2e
    2302:	8f a5       	ldd	r24, Y+47	; 0x2f
    2304:	98 a9       	ldd	r25, Y+48	; 0x30
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a e7       	ldi	r20, 0x7A	; 122
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8c a3       	std	Y+36, r24	; 0x24
    2318:	9d a3       	std	Y+37, r25	; 0x25
    231a:	ae a3       	std	Y+38, r26	; 0x26
    231c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	6c a1       	ldd	r22, Y+36	; 0x24
    2320:	7d a1       	ldd	r23, Y+37	; 0x25
    2322:	8e a1       	ldd	r24, Y+38	; 0x26
    2324:	9f a1       	ldd	r25, Y+39	; 0x27
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a ef       	ldi	r20, 0xFA	; 250
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	88 a3       	std	Y+32, r24	; 0x20
    2338:	99 a3       	std	Y+33, r25	; 0x21
    233a:	aa a3       	std	Y+34, r26	; 0x22
    233c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    233e:	68 a1       	ldd	r22, Y+32	; 0x20
    2340:	79 a1       	ldd	r23, Y+33	; 0x21
    2342:	8a a1       	ldd	r24, Y+34	; 0x22
    2344:	9b a1       	ldd	r25, Y+35	; 0x23
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <LCD_displayCharacter+0x51a>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9f 8f       	std	Y+31, r25	; 0x1f
    235c:	8e 8f       	std	Y+30, r24	; 0x1e
    235e:	3f c0       	rjmp	.+126    	; 0x23de <LCD_displayCharacter+0x598>
	else if (__tmp > 65535)
    2360:	68 a1       	ldd	r22, Y+32	; 0x20
    2362:	79 a1       	ldd	r23, Y+33	; 0x21
    2364:	8a a1       	ldd	r24, Y+34	; 0x22
    2366:	9b a1       	ldd	r25, Y+35	; 0x23
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	4c f5       	brge	.+82     	; 0x23ca <LCD_displayCharacter+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	6c a1       	ldd	r22, Y+36	; 0x24
    237a:	7d a1       	ldd	r23, Y+37	; 0x25
    237c:	8e a1       	ldd	r24, Y+38	; 0x26
    237e:	9f a1       	ldd	r25, Y+39	; 0x27
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9f 8f       	std	Y+31, r25	; 0x1f
    239e:	8e 8f       	std	Y+30, r24	; 0x1e
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <LCD_displayCharacter+0x57a>
    23a2:	88 ec       	ldi	r24, 0xC8	; 200
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9d 8f       	std	Y+29, r25	; 0x1d
    23a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_displayCharacter+0x568>
    23b2:	9d 8f       	std	Y+29, r25	; 0x1d
    23b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9f 8f       	std	Y+31, r25	; 0x1f
    23be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <LCD_displayCharacter+0x55c>
    23c8:	24 c0       	rjmp	.+72     	; 0x2412 <LCD_displayCharacter+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	68 a1       	ldd	r22, Y+32	; 0x20
    23cc:	79 a1       	ldd	r23, Y+33	; 0x21
    23ce:	8a a1       	ldd	r24, Y+34	; 0x22
    23d0:	9b a1       	ldd	r25, Y+35	; 0x23
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9f 8f       	std	Y+31, r25	; 0x1f
    23dc:	8e 8f       	std	Y+30, r24	; 0x1e
    23de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23e2:	9b 8f       	std	Y+27, r25	; 0x1b
    23e4:	8a 8f       	std	Y+26, r24	; 0x1a
    23e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_displayCharacter+0x5a4>
    23ee:	9b 8f       	std	Y+27, r25	; 0x1b
    23f0:	8a 8f       	std	Y+26, r24	; 0x1a
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <LCD_displayCharacter+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23f4:	69 a5       	ldd	r22, Y+41	; 0x29
    23f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    23f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	88 a7       	std	Y+40, r24	; 0x28
    2406:	88 a5       	ldd	r24, Y+40	; 0x28
    2408:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    240a:	89 8d       	ldd	r24, Y+25	; 0x19
    240c:	8a 95       	dec	r24
    240e:	f1 f7       	brne	.-4      	; 0x240c <LCD_displayCharacter+0x5c6>
    2410:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e0       	ldi	r26, 0x00	; 0
    2422:	b0 e4       	ldi	r27, 0x40	; 64
    2424:	8d 8b       	std	Y+21, r24	; 0x15
    2426:	9e 8b       	std	Y+22, r25	; 0x16
    2428:	af 8b       	std	Y+23, r26	; 0x17
    242a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	2b ea       	ldi	r18, 0xAB	; 171
    2436:	3a ea       	ldi	r19, 0xAA	; 170
    2438:	4a e2       	ldi	r20, 0x2A	; 42
    243a:	50 e4       	ldi	r21, 0x40	; 64
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	89 8b       	std	Y+17, r24	; 0x11
    2446:	9a 8b       	std	Y+18, r25	; 0x12
    2448:	ab 8b       	std	Y+19, r26	; 0x13
    244a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    244c:	69 89       	ldd	r22, Y+17	; 0x11
    244e:	7a 89       	ldd	r23, Y+18	; 0x12
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	1c f4       	brge	.+6      	; 0x246a <LCD_displayCharacter+0x624>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	88 8b       	std	Y+16, r24	; 0x10
    2468:	91 c0       	rjmp	.+290    	; 0x258c <LCD_displayCharacter+0x746>
	else if (__tmp > 255)
    246a:	69 89       	ldd	r22, Y+17	; 0x11
    246c:	7a 89       	ldd	r23, Y+18	; 0x12
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	53 e4       	ldi	r21, 0x43	; 67
    247a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	0c f0       	brlt	.+2      	; 0x2484 <LCD_displayCharacter+0x63e>
    2482:	7b c0       	rjmp	.+246    	; 0x257a <LCD_displayCharacter+0x734>
	{
		_delay_ms(__us / 1000.0);
    2484:	6d 89       	ldd	r22, Y+21	; 0x15
    2486:	7e 89       	ldd	r23, Y+22	; 0x16
    2488:	8f 89       	ldd	r24, Y+23	; 0x17
    248a:	98 8d       	ldd	r25, Y+24	; 0x18
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8c 87       	std	Y+12, r24	; 0x0c
    249e:	9d 87       	std	Y+13, r25	; 0x0d
    24a0:	ae 87       	std	Y+14, r26	; 0x0e
    24a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a ef       	ldi	r20, 0xFA	; 250
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	88 87       	std	Y+8, r24	; 0x08
    24be:	99 87       	std	Y+9, r25	; 0x09
    24c0:	aa 87       	std	Y+10, r26	; 0x0a
    24c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24c4:	68 85       	ldd	r22, Y+8	; 0x08
    24c6:	79 85       	ldd	r23, Y+9	; 0x09
    24c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_displayCharacter+0x6a0>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9f 83       	std	Y+7, r25	; 0x07
    24e2:	8e 83       	std	Y+6, r24	; 0x06
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_displayCharacter+0x71e>
	else if (__tmp > 65535)
    24e6:	68 85       	ldd	r22, Y+8	; 0x08
    24e8:	79 85       	ldd	r23, Y+9	; 0x09
    24ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_displayCharacter+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2500:	7d 85       	ldd	r23, Y+13	; 0x0d
    2502:	8e 85       	ldd	r24, Y+14	; 0x0e
    2504:	9f 85       	ldd	r25, Y+15	; 0x0f
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9f 83       	std	Y+7, r25	; 0x07
    2524:	8e 83       	std	Y+6, r24	; 0x06
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_displayCharacter+0x700>
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9d 83       	std	Y+5, r25	; 0x05
    252e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_displayCharacter+0x6ee>
    2538:	9d 83       	std	Y+5, r25	; 0x05
    253a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8e 81       	ldd	r24, Y+6	; 0x06
    253e:	9f 81       	ldd	r25, Y+7	; 0x07
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9f 83       	std	Y+7, r25	; 0x07
    2544:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_displayCharacter+0x6e2>
    254e:	24 c0       	rjmp	.+72     	; 0x2598 <LCD_displayCharacter+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	68 85       	ldd	r22, Y+8	; 0x08
    2552:	79 85       	ldd	r23, Y+9	; 0x09
    2554:	8a 85       	ldd	r24, Y+10	; 0x0a
    2556:	9b 85       	ldd	r25, Y+11	; 0x0b
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9f 83       	std	Y+7, r25	; 0x07
    2562:	8e 83       	std	Y+6, r24	; 0x06
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	9f 81       	ldd	r25, Y+7	; 0x07
    2568:	9b 83       	std	Y+3, r25	; 0x03
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_displayCharacter+0x72a>
    2574:	9b 83       	std	Y+3, r25	; 0x03
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <LCD_displayCharacter+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    257a:	69 89       	ldd	r22, Y+17	; 0x11
    257c:	7a 89       	ldd	r23, Y+18	; 0x12
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	88 8b       	std	Y+16, r24	; 0x10
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	8a 95       	dec	r24
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_displayCharacter+0x74c>
    2596:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    2598:	cf 59       	subi	r28, 0x9F	; 159
    259a:	df 4f       	sbci	r29, 0xFF	; 255
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	08 95       	ret

000025b0 <LCD_init>:

/*
 * Function to initialize the LCD
 */
void LCD_init(void)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	2e 97       	sbiw	r28, 0x0e	; 14
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 ea       	ldi	r26, 0xA0	; 160
    25de:	b1 e4       	ldi	r27, 0x41	; 65
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
    25e4:	ad 87       	std	Y+13, r26	; 0x0d
    25e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8f 83       	std	Y+7, r24	; 0x07
    2602:	98 87       	std	Y+8, r25	; 0x08
    2604:	a9 87       	std	Y+9, r26	; 0x09
    2606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <LCD_init+0x7a>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	0f c0       	rjmp	.+30     	; 0x268a <LCD_init+0xda>
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_init+0xc8>
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <LCD_init+0xbc>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_init+0x104>
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20); /* LCD Power ON delay */

    #if (LCD_BIT_MODE == 8)

    	/* Configure the data port as output port */
        GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	6f ef       	ldi	r22, 0xFF	; 255
    26c0:	0e 94 c5 09 	call	0x138a	; 0x138a <GPIO_setupPortDirection>

        /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_8BIT);
    26c4:	88 e3       	ldi	r24, 0x38	; 56
    26c6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_SendCommand>
        LCD_SendCommand(LCD_4BIT);	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_4BIT1);	/* Send for 4 bit initialization of LCD  */
        LCD_SendCommand(LCD_4BIT2);
    #endif

    LCD_SendCommand(LCD_CURSOR_OFF);		/* cursor off */
    26ca:	8c e0       	ldi	r24, 0x0C	; 12
    26cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_SendCommand>
    LCD_SendCommand(LCD_CLEAR_COMMAND);		/* clear LCD at the beginning */
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_SendCommand>
}
    26d6:	2e 96       	adiw	r28, 0x0e	; 14
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <LCD_displayString>:

/*
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <LCD_displayString+0x6>
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    26f8:	19 82       	std	Y+1, r1	; 0x01
    26fa:	0e c0       	rjmp	.+28     	; 0x2718 <LCD_displayString+0x30>
    while (string[i] != '\0')
    {
        LCD_displayCharacter(string[i]);
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	fc 01       	movw	r30, r24
    2708:	e2 0f       	add	r30, r18
    270a:	f3 1f       	adc	r31, r19
    270c:	80 81       	ld	r24, Z
    270e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_displayCharacter>
        i++;
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	89 83       	std	Y+1, r24	; 0x01
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    uint8 i = 0;
    while (string[i] != '\0')
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	fc 01       	movw	r30, r24
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	80 81       	ld	r24, Z
    272a:	88 23       	and	r24, r24
    272c:	39 f7       	brne	.-50     	; 0x26fc <LCD_displayString+0x14>
    {
        LCD_displayCharacter(string[i]);
        i++;
    }
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_moveCursor>:

/*
 * Function to move the cursor to a specific row and column on the LCD
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	6d 97       	sbiw	r28, 0x1d	; 29
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	8a 8f       	std	Y+26, r24	; 0x1a
    2750:	6b 8f       	std	Y+27, r22	; 0x1b
    uint8 address;
    switch (row)
    2752:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3d 8f       	std	Y+29, r19	; 0x1d
    275a:	2c 8f       	std	Y+28, r18	; 0x1c
    275c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    275e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	91 05       	cpc	r25, r1
    2764:	c1 f0       	breq	.+48     	; 0x2796 <LCD_moveCursor+0x5c>
    2766:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2768:	3d 8d       	ldd	r19, Y+29	; 0x1d
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	31 05       	cpc	r19, r1
    276e:	2c f4       	brge	.+10     	; 0x277a <LCD_moveCursor+0x40>
    2770:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2772:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	61 f0       	breq	.+24     	; 0x2790 <LCD_moveCursor+0x56>
    2778:	19 c0       	rjmp	.+50     	; 0x27ac <LCD_moveCursor+0x72>
    277a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    277c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    277e:	22 30       	cpi	r18, 0x02	; 2
    2780:	31 05       	cpc	r19, r1
    2782:	69 f0       	breq	.+26     	; 0x279e <LCD_moveCursor+0x64>
    2784:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2786:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2788:	83 30       	cpi	r24, 0x03	; 3
    278a:	91 05       	cpc	r25, r1
    278c:	61 f0       	breq	.+24     	; 0x27a6 <LCD_moveCursor+0x6c>
    278e:	0e c0       	rjmp	.+28     	; 0x27ac <LCD_moveCursor+0x72>
    {
    case 0:
        address = col;
    2790:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2792:	89 8f       	std	Y+25, r24	; 0x19
    2794:	0b c0       	rjmp	.+22     	; 0x27ac <LCD_moveCursor+0x72>
        break;
    case 1:
        address = col + 0x40;
    2796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2798:	80 5c       	subi	r24, 0xC0	; 192
    279a:	89 8f       	std	Y+25, r24	; 0x19
    279c:	07 c0       	rjmp	.+14     	; 0x27ac <LCD_moveCursor+0x72>
        break;
    case 2:
        address = col + 0x10;
    279e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a0:	80 5f       	subi	r24, 0xF0	; 240
    27a2:	89 8f       	std	Y+25, r24	; 0x19
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <LCD_moveCursor+0x72>
        break;
    case 3:
        address = col + 0x50;
    27a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a8:	80 5b       	subi	r24, 0xB0	; 176
    27aa:	89 8f       	std	Y+25, r24	; 0x19
        break;
    }
    LCD_SendCommand(address | LCD_MOVE_CURSOR);
    27ac:	89 8d       	ldd	r24, Y+25	; 0x19
    27ae:	80 68       	ori	r24, 0x80	; 128
    27b0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_SendCommand>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e0       	ldi	r26, 0x00	; 0
    27ba:	b0 e4       	ldi	r27, 0x40	; 64
    27bc:	8d 8b       	std	Y+21, r24	; 0x15
    27be:	9e 8b       	std	Y+22, r25	; 0x16
    27c0:	af 8b       	std	Y+23, r26	; 0x17
    27c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27c4:	6d 89       	ldd	r22, Y+21	; 0x15
    27c6:	7e 89       	ldd	r23, Y+22	; 0x16
    27c8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ca:	98 8d       	ldd	r25, Y+24	; 0x18
    27cc:	2b ea       	ldi	r18, 0xAB	; 171
    27ce:	3a ea       	ldi	r19, 0xAA	; 170
    27d0:	4a e2       	ldi	r20, 0x2A	; 42
    27d2:	50 e4       	ldi	r21, 0x40	; 64
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	89 8b       	std	Y+17, r24	; 0x11
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	ab 8b       	std	Y+19, r26	; 0x13
    27e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27e4:	69 89       	ldd	r22, Y+17	; 0x11
    27e6:	7a 89       	ldd	r23, Y+18	; 0x12
    27e8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ea:	9c 89       	ldd	r25, Y+20	; 0x14
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	1c f4       	brge	.+6      	; 0x2802 <LCD_moveCursor+0xc8>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	88 8b       	std	Y+16, r24	; 0x10
    2800:	91 c0       	rjmp	.+290    	; 0x2924 <LCD_moveCursor+0x1ea>
	else if (__tmp > 255)
    2802:	69 89       	ldd	r22, Y+17	; 0x11
    2804:	7a 89       	ldd	r23, Y+18	; 0x12
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	53 e4       	ldi	r21, 0x43	; 67
    2812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	0c f0       	brlt	.+2      	; 0x281c <LCD_moveCursor+0xe2>
    281a:	7b c0       	rjmp	.+246    	; 0x2912 <LCD_moveCursor+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a e7       	ldi	r20, 0x7A	; 122
    282a:	54 e4       	ldi	r21, 0x44	; 68
    282c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8c 87       	std	Y+12, r24	; 0x0c
    2836:	9d 87       	std	Y+13, r25	; 0x0d
    2838:	ae 87       	std	Y+14, r26	; 0x0e
    283a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6c 85       	ldd	r22, Y+12	; 0x0c
    283e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2840:	8e 85       	ldd	r24, Y+14	; 0x0e
    2842:	9f 85       	ldd	r25, Y+15	; 0x0f
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	88 87       	std	Y+8, r24	; 0x08
    2856:	99 87       	std	Y+9, r25	; 0x09
    2858:	aa 87       	std	Y+10, r26	; 0x0a
    285a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    285c:	68 85       	ldd	r22, Y+8	; 0x08
    285e:	79 85       	ldd	r23, Y+9	; 0x09
    2860:	8a 85       	ldd	r24, Y+10	; 0x0a
    2862:	9b 85       	ldd	r25, Y+11	; 0x0b
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <LCD_moveCursor+0x144>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9f 83       	std	Y+7, r25	; 0x07
    287a:	8e 83       	std	Y+6, r24	; 0x06
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <LCD_moveCursor+0x1c2>
	else if (__tmp > 65535)
    287e:	68 85       	ldd	r22, Y+8	; 0x08
    2880:	79 85       	ldd	r23, Y+9	; 0x09
    2882:	8a 85       	ldd	r24, Y+10	; 0x0a
    2884:	9b 85       	ldd	r25, Y+11	; 0x0b
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <LCD_moveCursor+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6c 85       	ldd	r22, Y+12	; 0x0c
    2898:	7d 85       	ldd	r23, Y+13	; 0x0d
    289a:	8e 85       	ldd	r24, Y+14	; 0x0e
    289c:	9f 85       	ldd	r25, Y+15	; 0x0f
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9f 83       	std	Y+7, r25	; 0x07
    28bc:	8e 83       	std	Y+6, r24	; 0x06
    28be:	0f c0       	rjmp	.+30     	; 0x28de <LCD_moveCursor+0x1a4>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9d 83       	std	Y+5, r25	; 0x05
    28c6:	8c 83       	std	Y+4, r24	; 0x04
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	9d 81       	ldd	r25, Y+5	; 0x05
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_moveCursor+0x192>
    28d0:	9d 83       	std	Y+5, r25	; 0x05
    28d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	8e 81       	ldd	r24, Y+6	; 0x06
    28d6:	9f 81       	ldd	r25, Y+7	; 0x07
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9f 83       	std	Y+7, r25	; 0x07
    28dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	8e 81       	ldd	r24, Y+6	; 0x06
    28e0:	9f 81       	ldd	r25, Y+7	; 0x07
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <LCD_moveCursor+0x186>
    28e6:	24 c0       	rjmp	.+72     	; 0x2930 <LCD_moveCursor+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	68 85       	ldd	r22, Y+8	; 0x08
    28ea:	79 85       	ldd	r23, Y+9	; 0x09
    28ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9f 83       	std	Y+7, r25	; 0x07
    28fa:	8e 83       	std	Y+6, r24	; 0x06
    28fc:	8e 81       	ldd	r24, Y+6	; 0x06
    28fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2900:	9b 83       	std	Y+3, r25	; 0x03
    2902:	8a 83       	std	Y+2, r24	; 0x02
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <LCD_moveCursor+0x1ce>
    290c:	9b 83       	std	Y+3, r25	; 0x03
    290e:	8a 83       	std	Y+2, r24	; 0x02
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <LCD_moveCursor+0x1f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2912:	69 89       	ldd	r22, Y+17	; 0x11
    2914:	7a 89       	ldd	r23, Y+18	; 0x12
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	88 8b       	std	Y+16, r24	; 0x10
    2924:	88 89       	ldd	r24, Y+16	; 0x10
    2926:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	8a 95       	dec	r24
    292c:	f1 f7       	brne	.-4      	; 0x292a <LCD_moveCursor+0x1f0>
    292e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    2930:	6d 96       	adiw	r28, 0x1d	; 29
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <LCD_displaySringRowColumn>:

/*
 * Function to display a string at a specific row and column on the LCD
 */
void LCD_displaySringRowColumn(const char* string, uint8 row, uint8 col)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <LCD_displaySringRowColumn+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <LCD_displaySringRowColumn+0x8>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	6b 83       	std	Y+3, r22	; 0x03
    2954:	4c 83       	std	Y+4, r20	; 0x04
    LCD_moveCursor(row, col);
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	6c 81       	ldd	r22, Y+4	; 0x04
    295a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
    LCD_displayString(string);
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <LCD_clearScreen>:

/*
 * Function to clear the LCD screen
 */
void LCD_clearScreen(void)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_CLEAR_COMMAND);
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_SendCommand>
}
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <LCD_intgerToString>:

/*
 * Function to convert an integer to a string and display it on the LCD
 */
void LCD_intgerToString(int data)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	62 97       	sbiw	r28, 0x12	; 18
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	9a 8b       	std	Y+18, r25	; 0x12
    299e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data, buff, 10);
    29a0:	89 89       	ldd	r24, Y+17	; 0x11
    29a2:	9a 89       	ldd	r25, Y+18	; 0x12
    29a4:	9e 01       	movw	r18, r28
    29a6:	2f 5f       	subi	r18, 0xFF	; 255
    29a8:	3f 4f       	sbci	r19, 0xFF	; 255
    29aa:	b9 01       	movw	r22, r18
    29ac:	4a e0       	ldi	r20, 0x0A	; 10
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	0e 94 45 18 	call	0x308a	; 0x308a <itoa>
   LCD_displayString(buff);
    29b4:	ce 01       	movw	r24, r28
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
}
    29bc:	62 96       	adiw	r28, 0x12	; 18
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <main>:
#include <util/delay.h> 	/* Delay functions */


/* Main function */
int main (void)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	64 97       	sbiw	r28, 0x14	; 20
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    uint16 distance = 0; 	/* Variable to store distance measurement */
    29e2:	19 8a       	std	Y+17, r1	; 0x11
    29e4:	18 8a       	std	Y+16, r1	; 0x10
    uint8 move_char = 0;
    29e6:	1f 86       	std	Y+15, r1	; 0x0f

    LCD_init(); 			/* Initialize LCD */
    29e8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <LCD_init>
    ULTRASONIC_init(); 		/* Initialize Ultrasonic sensor */
    29ec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <ULTRASONIC_init>
    BUZZER_init();			/* Initialize BUZZER sensor */
    29f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <BUZZER_init>

    SREG |= (1<<7); 		/* Enable global interrupts */
    29f4:	af e5       	ldi	r26, 0x5F	; 95
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ef e5       	ldi	r30, 0x5F	; 95
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	80 68       	ori	r24, 0x80	; 128
    2a00:	8c 93       	st	X, r24

    LCD_displayString("Distance =    cm"); /* Display initial message on LCD */
    2a02:	80 e6       	ldi	r24, 0x60	; 96
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>

    /* Main loop */
    while (1)
    {
    	/* Move cursor to the position to display distance */
        LCD_moveCursor(0,11);
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	6b e0       	ldi	r22, 0x0B	; 11
    2a0e:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>

        /* Read distance from Ultrasonic sensor */
        distance = (uint16)ULTRASONIC_readDistance();
    2a12:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <ULTRASONIC_readDistance>
    2a16:	99 8b       	std	Y+17, r25	; 0x11
    2a18:	88 8b       	std	Y+16, r24	; 0x10

        BUZZER_sound(distance);
    2a1a:	88 89       	ldd	r24, Y+16	; 0x10
    2a1c:	0e 94 28 07 	call	0xe50	; 0xe50 <BUZZER_sound>


        /* Check if distance is less than 100 cm */
        if (distance < 100)
    2a20:	88 89       	ldd	r24, Y+16	; 0x10
    2a22:	99 89       	ldd	r25, Y+17	; 0x11
    2a24:	84 36       	cpi	r24, 0x64	; 100
    2a26:	91 05       	cpc	r25, r1
    2a28:	40 f4       	brcc	.+16     	; 0x2a3a <main+0x6c>
        {
            LCD_intgerToString(distance); 	/* Display distance value */
    2a2a:	88 89       	ldd	r24, Y+16	; 0x10
    2a2c:	99 89       	ldd	r25, Y+17	; 0x11
    2a2e:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_intgerToString>
            LCD_displayCharacter(' '); 		/* Display space after distance */
    2a32:	80 e2       	ldi	r24, 0x20	; 32
    2a34:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_displayCharacter>
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <main+0x74>
        }
        else
        {
            LCD_intgerToString(distance); 	/* Display distance value */
    2a3a:	88 89       	ldd	r24, Y+16	; 0x10
    2a3c:	99 89       	ldd	r25, Y+17	; 0x11
    2a3e:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_intgerToString>
        }


        if (distance <= MAX_DISTANCE && distance > 20)
    2a42:	88 89       	ldd	r24, Y+16	; 0x10
    2a44:	99 89       	ldd	r25, Y+17	; 0x11
    2a46:	8f 31       	cpi	r24, 0x1F	; 31
    2a48:	91 05       	cpc	r25, r1
    2a4a:	c0 f4       	brcc	.+48     	; 0x2a7c <main+0xae>
    2a4c:	88 89       	ldd	r24, Y+16	; 0x10
    2a4e:	99 89       	ldd	r25, Y+17	; 0x11
    2a50:	85 31       	cpi	r24, 0x15	; 21
    2a52:	91 05       	cpc	r25, r1
    2a54:	98 f0       	brcs	.+38     	; 0x2a7c <main+0xae>
        {
            /* Move cursor to the second line */
            LCD_moveCursor(1,0);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
        	LCD_displayString("      "); 				/* Clear any remaining stop sign*/
    2a5e:	81 e7       	ldi	r24, 0x71	; 113
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
        	LCD_displaySringRowColumn("STOP!", 1,6);
    2a66:	88 e7       	ldi	r24, 0x78	; 120
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	46 e0       	ldi	r20, 0x06	; 6
    2a6e:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displaySringRowColumn>
        	LCD_displayString("     "); 				/* Clear any remaining stop sign*/
    2a72:	8e e7       	ldi	r24, 0x7E	; 126
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
    2a7a:	87 c0       	rjmp	.+270    	; 0x2b8a <main+0x1bc>

        }
        else if (distance <= 20 && distance > 10)
    2a7c:	88 89       	ldd	r24, Y+16	; 0x10
    2a7e:	99 89       	ldd	r25, Y+17	; 0x11
    2a80:	85 31       	cpi	r24, 0x15	; 21
    2a82:	91 05       	cpc	r25, r1
    2a84:	e0 f5       	brcc	.+120    	; 0x2afe <main+0x130>
    2a86:	88 89       	ldd	r24, Y+16	; 0x10
    2a88:	99 89       	ldd	r25, Y+17	; 0x11
    2a8a:	8b 30       	cpi	r24, 0x0B	; 11
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	b8 f1       	brcs	.+110    	; 0x2afe <main+0x130>
        {
            /* Move cursor to the second line */
            LCD_moveCursor(1,0);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
        	LCD_displayString("      "); 				/* Clear any remaining stop sign*/
    2a98:	81 e7       	ldi	r24, 0x71	; 113
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
        	LCD_displaySringRowColumn("STOP!", 1,6);
    2aa0:	88 e7       	ldi	r24, 0x78	; 120
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	46 e0       	ldi	r20, 0x06	; 6
    2aa8:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displaySringRowColumn>
        	LCD_displayString("     "); 				/* Clear any remaining stop sign*/
    2aac:	8e e7       	ldi	r24, 0x7E	; 126
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>

            /* Move cursor to the 3rd line */
        	LCD_moveCursor(2,0);
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
        	LCD_displayString("      "); 				/* Clear any remaining stop sign*/
    2abc:	81 e7       	ldi	r24, 0x71	; 113
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
        	LCD_displaySringRowColumn("STOP!", 2,6);
    2ac4:	88 e7       	ldi	r24, 0x78	; 120
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	46 e0       	ldi	r20, 0x06	; 6
    2acc:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displaySringRowColumn>
        	LCD_displayString("     "); 				/* Clear any remaining stop sign*/
    2ad0:	8e e7       	ldi	r24, 0x7E	; 126
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>

        	/* Move cursor to the 3rd line */
        	LCD_moveCursor(3,0);
    2ad8:	83 e0       	ldi	r24, 0x03	; 3
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
        	LCD_displayString("      "); 				/* Clear any remaining stop sign*/
    2ae0:	81 e7       	ldi	r24, 0x71	; 113
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
        	LCD_displaySringRowColumn("STOP!", 3,6);
    2ae8:	88 e7       	ldi	r24, 0x78	; 120
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	63 e0       	ldi	r22, 0x03	; 3
    2aee:	46 e0       	ldi	r20, 0x06	; 6
    2af0:	0e 94 a1 14 	call	0x2942	; 0x2942 <LCD_displaySringRowColumn>
        	LCD_displayString("     "); 				/* Clear any remaining stop sign*/
    2af4:	8e e7       	ldi	r24, 0x7E	; 126
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
    2afc:	46 c0       	rjmp	.+140    	; 0x2b8a <main+0x1bc>
        }
        else if (distance <= 10)
    2afe:	88 89       	ldd	r24, Y+16	; 0x10
    2b00:	99 89       	ldd	r25, Y+17	; 0x11
    2b02:	8b 30       	cpi	r24, 0x0B	; 11
    2b04:	91 05       	cpc	r25, r1
    2b06:	b8 f4       	brcc	.+46     	; 0x2b36 <main+0x168>
        {
        	/* Display stop all over the screen */
        	LCD_moveCursor(2,0);
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <main+0x14c>
        	while (move_char++ != 13)
        	{
        		LCD_displayString("STOP!!");
    2b12:	84 e8       	ldi	r24, 0x84	; 132
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 74 13 	call	0x26e8	; 0x26e8 <LCD_displayString>
        }
        else if (distance <= 10)
        {
        	/* Display stop all over the screen */
        	LCD_moveCursor(2,0);
        	while (move_char++ != 13)
    2b1a:	1c 8a       	std	Y+20, r1	; 0x14
    2b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1e:	8d 30       	cpi	r24, 0x0D	; 13
    2b20:	11 f0       	breq	.+4      	; 0x2b26 <main+0x158>
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	8c 8b       	std	Y+20, r24	; 0x14
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	8f 87       	std	Y+15, r24	; 0x0f
    2b2c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b2e:	88 23       	and	r24, r24
    2b30:	81 f7       	brne	.-32     	; 0x2b12 <main+0x144>
        	{
        		LCD_displayString("STOP!!");
        	}
        	move_char = 0; /* Reset the navigation char */
    2b32:	1f 86       	std	Y+15, r1	; 0x0f
    2b34:	2a c0       	rjmp	.+84     	; 0x2b8a <main+0x1bc>
        }
        else
        {
        	/* Move cursor to the third line  */
        	LCD_moveCursor(2,0);
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
    2b3e:	03 c0       	rjmp	.+6      	; 0x2b46 <main+0x178>

        	/* Loop over the third line to clear it all */
        	while (move_char++ != 16)
        	{
        		/* Clear all stop signs */
        		LCD_displayCharacter(' ');
    2b40:	80 e2       	ldi	r24, 0x20	; 32
    2b42:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_displayCharacter>
        {
        	/* Move cursor to the third line  */
        	LCD_moveCursor(2,0);

        	/* Loop over the third line to clear it all */
        	while (move_char++ != 16)
    2b46:	1b 8a       	std	Y+19, r1	; 0x13
    2b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4a:	80 31       	cpi	r24, 0x10	; 16
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <main+0x184>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	8b 8b       	std	Y+19, r24	; 0x13
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	8f 87       	std	Y+15, r24	; 0x0f
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	88 23       	and	r24, r24
    2b5c:	89 f7       	brne	.-30     	; 0x2b40 <main+0x172>
        	{
        		/* Clear all stop signs */
        		LCD_displayCharacter(' ');
        	}
        	move_char = 0;
    2b5e:	1f 86       	std	Y+15, r1	; 0x0f

        	 /* Move cursor to the second line */
        	LCD_moveCursor(1,0);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_moveCursor>
    2b68:	03 c0       	rjmp	.+6      	; 0x2b70 <main+0x1a2>

        	/* Loop over the second & 4th line to clear them all */
        	while (move_char++ != 32)
        	{
        		/* Clear all stop signs */
        		LCD_displayCharacter(' ');
    2b6a:	80 e2       	ldi	r24, 0x20	; 32
    2b6c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_displayCharacter>

        	 /* Move cursor to the second line */
        	LCD_moveCursor(1,0);

        	/* Loop over the second & 4th line to clear them all */
        	while (move_char++ != 32)
    2b70:	1a 8a       	std	Y+18, r1	; 0x12
    2b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b74:	80 32       	cpi	r24, 0x20	; 32
    2b76:	11 f0       	breq	.+4      	; 0x2b7c <main+0x1ae>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	8a 8b       	std	Y+18, r24	; 0x12
    2b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7e:	8f 5f       	subi	r24, 0xFF	; 255
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
    2b82:	8a 89       	ldd	r24, Y+18	; 0x12
    2b84:	88 23       	and	r24, r24
    2b86:	89 f7       	brne	.-30     	; 0x2b6a <main+0x19c>
        	{
        		/* Clear all stop signs */
        		LCD_displayCharacter(' ');
        	}
        	move_char = 0; /* Reset the navigation char */
    2b88:	1f 86       	std	Y+15, r1	; 0x0f
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	aa ef       	ldi	r26, 0xFA	; 250
    2b90:	b3 e4       	ldi	r27, 0x43	; 67
    2b92:	8b 87       	std	Y+11, r24	; 0x0b
    2b94:	9c 87       	std	Y+12, r25	; 0x0c
    2b96:	ad 87       	std	Y+13, r26	; 0x0d
    2b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a ef       	ldi	r20, 0xFA	; 250
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8f 83       	std	Y+7, r24	; 0x07
    2bb4:	98 87       	std	Y+8, r25	; 0x08
    2bb6:	a9 87       	std	Y+9, r26	; 0x09
    2bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <main+0x20e>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
    2bda:	3f c0       	rjmp	.+126    	; 0x2c5a <main+0x28c>
	else if (__tmp > 65535)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	4f e7       	ldi	r20, 0x7F	; 127
    2bea:	57 e4       	ldi	r21, 0x47	; 71
    2bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	4c f5       	brge	.+82     	; 0x2c46 <main+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <main+0x26e>
    2c1e:	88 ec       	ldi	r24, 0xC8	; 200
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <main+0x25c>
    2c2e:	9c 83       	std	Y+4, r25	; 0x04
    2c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f7       	brne	.-38     	; 0x2c1e <main+0x250>
    2c44:	e2 ce       	rjmp	.-572    	; 0x2a0a <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	6f 81       	ldd	r22, Y+7	; 0x07
    2c48:	78 85       	ldd	r23, Y+8	; 0x08
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <main+0x298>
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	cd ce       	rjmp	.-614    	; 0x2a0a <main+0x3c>

00002c70 <PWM_Timer0_Start>:
/*
 * Description :
 * Function responsible To start the pwm signal using timer0 compare mode
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	0f 92       	push	r0
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID,PIN_OUTPUT);
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	63 e0       	ldi	r22, 0x03	; 3
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>

	TCNT0 = 0; /* Set Timer Initial value */
    2c8a:	e2 e5       	ldi	r30, 0x52	; 82
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	10 82       	st	Z, r1

	if (duty_cycle > 100)
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	85 36       	cpi	r24, 0x65	; 101
    2c94:	10 f0       	brcs	.+4      	; 0x2c9a <PWM_Timer0_Start+0x2a>
	{
		duty_cycle = 100;
    2c96:	84 e6       	ldi	r24, 0x64	; 100
    2c98:	89 83       	std	Y+1, r24	; 0x01
	}
	else if (duty_cycle < 0)
	{
		duty_cycle = 0;
	}
	OCR0  = (uint8)(((float)(duty_cycle)/(100)) * 255); // Set Compare Value
    2c9a:	0c e5       	ldi	r16, 0x5C	; 92
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	a0 e0       	ldi	r26, 0x00	; 0
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	48 ec       	ldi	r20, 0xC8	; 200
    2cbe:	52 e4       	ldi	r21, 0x42	; 66
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4f e7       	ldi	r20, 0x7F	; 127
    2cd2:	53 e4       	ldi	r21, 0x43	; 67
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2cec:	e3 e5       	ldi	r30, 0x53	; 83
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	8a e6       	ldi	r24, 0x6A	; 106
    2cf2:	80 83       	st	Z, r24
}
    2cf4:	0f 90       	pop	r0
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <PWM_Timer0_Stop>:
/*
 * Description :
 * Function responsible To End the pwm signal.
 */
void PWM_Timer0_Stop (void)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the timer clock & Clear timer registers  */
	TCCR0 = 0;
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	10 82       	st	Z, r1
	OCR0  = 0;
    2d0e:	ec e5       	ldi	r30, 0x5C	; 92
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	10 82       	st	Z, r1
	TCNT0 = 0;
    2d14:	e2 e5       	ldi	r30, 0x52	; 82
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	10 82       	st	Z, r1
}
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <ULTRASONIC_init>:
 * 	1. initialize the ICU driver.
 * 	2. Set the ICU call back function.
 * 	3.  Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void ULTRASONIC_init(void)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <ULTRASONIC_init+0x6>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    /* Configure ICU with prescaler F_CPU/8 and rising edge detection */
    ICU_ConfigType configurations = {F_CPU_8, RISING};
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&configurations);
    2d32:	ce 01       	movw	r24, r28
    2d34:	01 96       	adiw	r24, 0x01	; 1
    2d36:	0e 94 c5 0a 	call	0x158a	; 0x158a <ICU_init>

    /* Set callback function for edge processing */
    ICU_setCallBackFunction(ULTRASONIC_edgeProcessing);
    2d3a:	82 ec       	ldi	r24, 0xC2	; 194
    2d3c:	97 e1       	ldi	r25, 0x17	; 23
    2d3e:	0e 94 26 0b 	call	0x164c	; 0x164c <ICU_setCallBackFunction>

    /* Set trigger pin as output and initialize it to low logic level */
    GPIO_setupPinDirection(TRIGGER_PORT_ID, TRIGGER_PIN_ID, PIN_OUTPUT);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	65 e0       	ldi	r22, 0x05	; 5
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
    GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_LOW);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	65 e0       	ldi	r22, 0x05	; 5
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <ULTRASONIC_trigger>:

/*
 * Description : Function to trigger Ultrasonic sensor.
 */
void ULTRASONIC_trigger(void)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	68 97       	sbiw	r28, 0x18	; 24
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    /* Send trigger signal by setting trigger pin high for 15 microseconds */
    GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_HIGH);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	65 e0       	ldi	r22, 0x05	; 5
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a0 e7       	ldi	r26, 0x70	; 112
    2d84:	b1 e4       	ldi	r27, 0x41	; 65
    2d86:	8d 8b       	std	Y+21, r24	; 0x15
    2d88:	9e 8b       	std	Y+22, r25	; 0x16
    2d8a:	af 8b       	std	Y+23, r26	; 0x17
    2d8c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d90:	7e 89       	ldd	r23, Y+22	; 0x16
    2d92:	8f 89       	ldd	r24, Y+23	; 0x17
    2d94:	98 8d       	ldd	r25, Y+24	; 0x18
    2d96:	2b ea       	ldi	r18, 0xAB	; 171
    2d98:	3a ea       	ldi	r19, 0xAA	; 170
    2d9a:	4a e2       	ldi	r20, 0x2A	; 42
    2d9c:	50 e4       	ldi	r21, 0x40	; 64
    2d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	89 8b       	std	Y+17, r24	; 0x11
    2da8:	9a 8b       	std	Y+18, r25	; 0x12
    2daa:	ab 8b       	std	Y+19, r26	; 0x13
    2dac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dae:	69 89       	ldd	r22, Y+17	; 0x11
    2db0:	7a 89       	ldd	r23, Y+18	; 0x12
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	1c f4       	brge	.+6      	; 0x2dcc <ULTRASONIC_trigger+0x6c>
		__ticks = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	88 8b       	std	Y+16, r24	; 0x10
    2dca:	91 c0       	rjmp	.+290    	; 0x2eee <ULTRASONIC_trigger+0x18e>
	else if (__tmp > 255)
    2dcc:	69 89       	ldd	r22, Y+17	; 0x11
    2dce:	7a 89       	ldd	r23, Y+18	; 0x12
    2dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	53 e4       	ldi	r21, 0x43	; 67
    2ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	0c f0       	brlt	.+2      	; 0x2de6 <ULTRASONIC_trigger+0x86>
    2de4:	7b c0       	rjmp	.+246    	; 0x2edc <ULTRASONIC_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a e7       	ldi	r20, 0x7A	; 122
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8c 87       	std	Y+12, r24	; 0x0c
    2e00:	9d 87       	std	Y+13, r25	; 0x0d
    2e02:	ae 87       	std	Y+14, r26	; 0x0e
    2e04:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e08:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a ef       	ldi	r20, 0xFA	; 250
    2e14:	54 e4       	ldi	r21, 0x44	; 68
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	88 87       	std	Y+8, r24	; 0x08
    2e20:	99 87       	std	Y+9, r25	; 0x09
    2e22:	aa 87       	std	Y+10, r26	; 0x0a
    2e24:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e26:	68 85       	ldd	r22, Y+8	; 0x08
    2e28:	79 85       	ldd	r23, Y+9	; 0x09
    2e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <ULTRASONIC_trigger+0xe8>
		__ticks = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9f 83       	std	Y+7, r25	; 0x07
    2e44:	8e 83       	std	Y+6, r24	; 0x06
    2e46:	3f c0       	rjmp	.+126    	; 0x2ec6 <ULTRASONIC_trigger+0x166>
	else if (__tmp > 65535)
    2e48:	68 85       	ldd	r22, Y+8	; 0x08
    2e4a:	79 85       	ldd	r23, Y+9	; 0x09
    2e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	4c f5       	brge	.+82     	; 0x2eb2 <ULTRASONIC_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e62:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e64:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e66:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9f 83       	std	Y+7, r25	; 0x07
    2e86:	8e 83       	std	Y+6, r24	; 0x06
    2e88:	0f c0       	rjmp	.+30     	; 0x2ea8 <ULTRASONIC_trigger+0x148>
    2e8a:	88 ec       	ldi	r24, 0xC8	; 200
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9d 83       	std	Y+5, r25	; 0x05
    2e90:	8c 83       	std	Y+4, r24	; 0x04
    2e92:	8c 81       	ldd	r24, Y+4	; 0x04
    2e94:	9d 81       	ldd	r25, Y+5	; 0x05
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <ULTRASONIC_trigger+0x136>
    2e9a:	9d 83       	std	Y+5, r25	; 0x05
    2e9c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	9f 83       	std	Y+7, r25	; 0x07
    2ea6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	69 f7       	brne	.-38     	; 0x2e8a <ULTRASONIC_trigger+0x12a>
    2eb0:	24 c0       	rjmp	.+72     	; 0x2efa <ULTRASONIC_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	68 85       	ldd	r22, Y+8	; 0x08
    2eb4:	79 85       	ldd	r23, Y+9	; 0x09
    2eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9f 83       	std	Y+7, r25	; 0x07
    2ec4:	8e 83       	std	Y+6, r24	; 0x06
    2ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eca:	9b 83       	std	Y+3, r25	; 0x03
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <ULTRASONIC_trigger+0x172>
    2ed6:	9b 83       	std	Y+3, r25	; 0x03
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <ULTRASONIC_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2edc:	69 89       	ldd	r22, Y+17	; 0x11
    2ede:	7a 89       	ldd	r23, Y+18	; 0x12
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	88 8b       	std	Y+16, r24	; 0x10
    2eee:	88 89       	ldd	r24, Y+16	; 0x10
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	8a 95       	dec	r24
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <ULTRASONIC_trigger+0x194>
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_LOW);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	65 e0       	ldi	r22, 0x05	; 5
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    2f04:	68 96       	adiw	r28, 0x18	; 24
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <ULTRASONIC_readDistance>:

/*
 * Description :  Function to read distance from Ultrasonic sensor.
 */
uint16 ULTRASONIC_readDistance(void)
{
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <ULTRASONIC_readDistance+0x6>
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    uint16 distance = 0;
    2f20:	1a 82       	std	Y+2, r1	; 0x02
    2f22:	19 82       	std	Y+1, r1	; 0x01

    /* Trigger Ultrasonic sensor */
    ULTRASONIC_trigger();
    2f24:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <ULTRASONIC_trigger>

    /* Wait until both rising and falling edges are detected */
    while(g_edgeCount != 2);
    2f28:	80 91 96 01 	lds	r24, 0x0196
    2f2c:	82 30       	cpi	r24, 0x02	; 2
    2f2e:	e1 f7       	brne	.-8      	; 0x2f28 <ULTRASONIC_readDistance+0x12>
     * distance = speed of sound * time
     * distance = 34300 * (g_timeTaken(in sec) / 2)
     * distance = 17150 * g_timeTaken(in sec)
     * distance = 0.01715 * g_timeTaken (in microseconds)
     */
    distance = (uint16)(g_timeTaken * 0.01715);
    2f30:	80 91 97 01 	lds	r24, 0x0197
    2f34:	90 91 98 01 	lds	r25, 0x0198
    2f38:	cc 01       	movw	r24, r24
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	28 e2       	ldi	r18, 0x28	; 40
    2f50:	3e e7       	ldi	r19, 0x7E	; 126
    2f52:	4c e8       	ldi	r20, 0x8C	; 140
    2f54:	5c e3       	ldi	r21, 0x3C	; 60
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01

    /* Reset edge count and timer */
    g_edgeCount = 0;
    2f6e:	10 92 96 01 	sts	0x0196, r1
    ICU_resetTimer();
    2f72:	0e 94 43 0b 	call	0x1686	; 0x1686 <ICU_resetTimer>

    return distance;
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <ULTRASONIC_edgeProcessing>:

/*
 * Description :  Callback function for edge processing.
 */
void ULTRASONIC_edgeProcessing(void)
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    g_edgeCount++;
    2f8c:	80 91 96 01 	lds	r24, 0x0196
    2f90:	8f 5f       	subi	r24, 0xFF	; 255
    2f92:	80 93 96 01 	sts	0x0196, r24
    if (g_edgeCount == 1)
    2f96:	80 91 96 01 	lds	r24, 0x0196
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	31 f4       	brne	.+12     	; 0x2faa <ULTRASONIC_edgeProcessing+0x26>
    {
        /* Reset timer and set edge detection to falling */
        ICU_resetTimer();
    2f9e:	0e 94 43 0b 	call	0x1686	; 0x1686 <ICU_resetTimer>
        ICU_edgeSelect(FALLING);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <ICU_edgeSelect>
    2fa8:	0f c0       	rjmp	.+30     	; 0x2fc8 <ULTRASONIC_edgeProcessing+0x44>
    }
    else if (g_edgeCount == 2)
    2faa:	80 91 96 01 	lds	r24, 0x0196
    2fae:	82 30       	cpi	r24, 0x02	; 2
    2fb0:	59 f4       	brne	.+22     	; 0x2fc8 <ULTRASONIC_edgeProcessing+0x44>
    {
        /* Get time taken from input capture unit and reset timer */
        g_timeTaken = ICU_getInputCaptureValue();
    2fb2:	0e 94 38 0b 	call	0x1670	; 0x1670 <ICU_getInputCaptureValue>
    2fb6:	90 93 98 01 	sts	0x0198, r25
    2fba:	80 93 97 01 	sts	0x0197, r24
        ICU_resetTimer();
    2fbe:	0e 94 43 0b 	call	0x1686	; 0x1686 <ICU_resetTimer>
        ICU_edgeSelect(RISING);
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <ICU_edgeSelect>
    }
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <__divmodhi4>:
    2fce:	97 fb       	bst	r25, 7
    2fd0:	09 2e       	mov	r0, r25
    2fd2:	07 26       	eor	r0, r23
    2fd4:	0a d0       	rcall	.+20     	; 0x2fea <__divmodhi4_neg1>
    2fd6:	77 fd       	sbrc	r23, 7
    2fd8:	04 d0       	rcall	.+8      	; 0x2fe2 <__divmodhi4_neg2>
    2fda:	0c d0       	rcall	.+24     	; 0x2ff4 <__udivmodhi4>
    2fdc:	06 d0       	rcall	.+12     	; 0x2fea <__divmodhi4_neg1>
    2fde:	00 20       	and	r0, r0
    2fe0:	1a f4       	brpl	.+6      	; 0x2fe8 <__divmodhi4_exit>

00002fe2 <__divmodhi4_neg2>:
    2fe2:	70 95       	com	r23
    2fe4:	61 95       	neg	r22
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00002fe8 <__divmodhi4_exit>:
    2fe8:	08 95       	ret

00002fea <__divmodhi4_neg1>:
    2fea:	f6 f7       	brtc	.-4      	; 0x2fe8 <__divmodhi4_exit>
    2fec:	90 95       	com	r25
    2fee:	81 95       	neg	r24
    2ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff2:	08 95       	ret

00002ff4 <__udivmodhi4>:
    2ff4:	aa 1b       	sub	r26, r26
    2ff6:	bb 1b       	sub	r27, r27
    2ff8:	51 e1       	ldi	r21, 0x11	; 17
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <__udivmodhi4_ep>

00002ffc <__udivmodhi4_loop>:
    2ffc:	aa 1f       	adc	r26, r26
    2ffe:	bb 1f       	adc	r27, r27
    3000:	a6 17       	cp	r26, r22
    3002:	b7 07       	cpc	r27, r23
    3004:	10 f0       	brcs	.+4      	; 0x300a <__udivmodhi4_ep>
    3006:	a6 1b       	sub	r26, r22
    3008:	b7 0b       	sbc	r27, r23

0000300a <__udivmodhi4_ep>:
    300a:	88 1f       	adc	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	5a 95       	dec	r21
    3010:	a9 f7       	brne	.-22     	; 0x2ffc <__udivmodhi4_loop>
    3012:	80 95       	com	r24
    3014:	90 95       	com	r25
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	08 95       	ret

0000301c <__prologue_saves__>:
    301c:	2f 92       	push	r2
    301e:	3f 92       	push	r3
    3020:	4f 92       	push	r4
    3022:	5f 92       	push	r5
    3024:	6f 92       	push	r6
    3026:	7f 92       	push	r7
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	ca 1b       	sub	r28, r26
    3046:	db 0b       	sbc	r29, r27
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	09 94       	ijmp

00003054 <__epilogue_restores__>:
    3054:	2a 88       	ldd	r2, Y+18	; 0x12
    3056:	39 88       	ldd	r3, Y+17	; 0x11
    3058:	48 88       	ldd	r4, Y+16	; 0x10
    305a:	5f 84       	ldd	r5, Y+15	; 0x0f
    305c:	6e 84       	ldd	r6, Y+14	; 0x0e
    305e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3060:	8c 84       	ldd	r8, Y+12	; 0x0c
    3062:	9b 84       	ldd	r9, Y+11	; 0x0b
    3064:	aa 84       	ldd	r10, Y+10	; 0x0a
    3066:	b9 84       	ldd	r11, Y+9	; 0x09
    3068:	c8 84       	ldd	r12, Y+8	; 0x08
    306a:	df 80       	ldd	r13, Y+7	; 0x07
    306c:	ee 80       	ldd	r14, Y+6	; 0x06
    306e:	fd 80       	ldd	r15, Y+5	; 0x05
    3070:	0c 81       	ldd	r16, Y+4	; 0x04
    3072:	1b 81       	ldd	r17, Y+3	; 0x03
    3074:	aa 81       	ldd	r26, Y+2	; 0x02
    3076:	b9 81       	ldd	r27, Y+1	; 0x01
    3078:	ce 0f       	add	r28, r30
    307a:	d1 1d       	adc	r29, r1
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	ed 01       	movw	r28, r26
    3088:	08 95       	ret

0000308a <itoa>:
    308a:	fb 01       	movw	r30, r22
    308c:	9f 01       	movw	r18, r30
    308e:	e8 94       	clt
    3090:	42 30       	cpi	r20, 0x02	; 2
    3092:	c4 f0       	brlt	.+48     	; 0x30c4 <itoa+0x3a>
    3094:	45 32       	cpi	r20, 0x25	; 37
    3096:	b4 f4       	brge	.+44     	; 0x30c4 <itoa+0x3a>
    3098:	4a 30       	cpi	r20, 0x0A	; 10
    309a:	29 f4       	brne	.+10     	; 0x30a6 <itoa+0x1c>
    309c:	97 fb       	bst	r25, 7
    309e:	1e f4       	brtc	.+6      	; 0x30a6 <itoa+0x1c>
    30a0:	90 95       	com	r25
    30a2:	81 95       	neg	r24
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	64 2f       	mov	r22, r20
    30a8:	77 27       	eor	r23, r23
    30aa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__udivmodhi4>
    30ae:	80 5d       	subi	r24, 0xD0	; 208
    30b0:	8a 33       	cpi	r24, 0x3A	; 58
    30b2:	0c f0       	brlt	.+2      	; 0x30b6 <itoa+0x2c>
    30b4:	89 5d       	subi	r24, 0xD9	; 217
    30b6:	81 93       	st	Z+, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	a1 f7       	brne	.-24     	; 0x30a6 <itoa+0x1c>
    30be:	16 f4       	brtc	.+4      	; 0x30c4 <itoa+0x3a>
    30c0:	5d e2       	ldi	r21, 0x2D	; 45
    30c2:	51 93       	st	Z+, r21
    30c4:	10 82       	st	Z, r1
    30c6:	c9 01       	movw	r24, r18
    30c8:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <strrev>

000030cc <strrev>:
    30cc:	dc 01       	movw	r26, r24
    30ce:	fc 01       	movw	r30, r24
    30d0:	67 2f       	mov	r22, r23
    30d2:	71 91       	ld	r23, Z+
    30d4:	77 23       	and	r23, r23
    30d6:	e1 f7       	brne	.-8      	; 0x30d0 <strrev+0x4>
    30d8:	32 97       	sbiw	r30, 0x02	; 2
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <strrev+0x18>
    30dc:	7c 91       	ld	r23, X
    30de:	6d 93       	st	X+, r22
    30e0:	70 83       	st	Z, r23
    30e2:	62 91       	ld	r22, -Z
    30e4:	ae 17       	cp	r26, r30
    30e6:	bf 07       	cpc	r27, r31
    30e8:	c8 f3       	brcs	.-14     	; 0x30dc <strrev+0x10>
    30ea:	08 95       	ret

000030ec <_exit>:
    30ec:	f8 94       	cli

000030ee <__stop_program>:
    30ee:	ff cf       	rjmp	.-2      	; 0x30ee <__stop_program>
